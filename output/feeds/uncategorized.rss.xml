<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Show Me the Code</title><link>https://seanmckaybeck.com/</link><description></description><atom:link href="https://seanmckaybeck.com/feeds/uncategorized.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 27 Jul 2015 00:00:00 -0400</lastBuildDate><item><title>Scrapy: The Basics</title><link>https://seanmckaybeck.com/scrapy-the-basics.html</link><description>&lt;h2&gt;Web scraping&lt;/h2&gt;
&lt;p&gt;Did you ever want an easy way to collect all those posts from that cool blog you read?
Or maybe you want to keep track of new posts to a favorite website?
Well you can do all of that web scraping. 
It is a practice employed by normal developers and large companies.
Google uses it to do all of their indexing for search.
This guide will walk you through how to do it for yourself.
As an example we will crawl &lt;a href="https://reddit.com/r/learnpython"&gt;/r/learnpython&lt;/a&gt; for new posts.&lt;/p&gt;
&lt;h2&gt;Scrapy&lt;/h2&gt;
&lt;p&gt;Scrapy is a Python framework for making web spiders.
So-called spiders are the basis for crawling the web.
Scrapy makes it easy to create a spider in just a few lines of code.
Unfortunately, it only works with Python 2.7, so make sure you have a version of 2.7 installed.
I used Python 2.7.10 to make this example spider.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;You should always start with a virtual environment for your projects.
I keep all of mine is a folder called &lt;code&gt;venvs&lt;/code&gt;.
You do not have to do the same, although it keeps them separated from everything else.
Ensure that &lt;code&gt;virtualenv&lt;/code&gt; is installed for your system before continuing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv-2.7 venvs/scrapy
&lt;span class="c"&gt;# this creates your virtual environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venvs/scrapy/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;scrapy&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install scrapy service_identity
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;service_identity&lt;/code&gt; package fixes an OpenSSL issue I was having.
It's possible you might get it as well, so install it just in case.&lt;/p&gt;
&lt;h3&gt;Project creation&lt;/h3&gt;
&lt;p&gt;Scrapy provides an excellent and easy way to create a project.
Scrapy will build a whole directory tree of everything you need just by supplying it with a project name.
However, for a simple spider, like the one we are making, none of that is necessary.
But just so you are aware, if you wanted to start a project in this manner you would run
&lt;code&gt;scrapy startproject myspider&lt;/code&gt;. You can follow a full tutorial in that manner using the &lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;Scrapy docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Our spider&lt;/h2&gt;
&lt;p&gt;We just need something simple.
Our spider will be 34 lines of code, although by stripping out white space is would be smaller.
We will be crawling &lt;code&gt;/r/learnpython&lt;/code&gt;, which only has text posts.
However, the data we scrape can be gathered from any subreddit.&lt;/p&gt;
&lt;h3&gt;Scraped data&lt;/h3&gt;
&lt;p&gt;Scrapy provides an object called an &lt;code&gt;Item&lt;/code&gt; for storing scraped data.
We must start our spider by defining our &lt;code&gt;Item&lt;/code&gt;.
Let's call it &lt;code&gt;TextPostItem&lt;/code&gt;. 
We create our own class that inherits from the base class &lt;code&gt;Item&lt;/code&gt; and define the fields we wish it to store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.item&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextPostItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;submitted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this in a file called &lt;code&gt;spider.py&lt;/code&gt; (note that it does not matter what you name the file).&lt;/p&gt;
&lt;h3&gt;The spider&lt;/h3&gt;
&lt;p&gt;That was easy, wasn't it?
6 lines and we have a nice little container for our scraped data.
Now we need to build our spider.
Scrapy provides many different kinds of spiders each of which serves a specific purpose.
We want to recursively crawl through pages of our target subreddit, not just the first page.
To do this we use a &lt;code&gt;CrawlSpider&lt;/code&gt;.
This kind of spider will allow us to easily crawl through multiple pages and get all that juicy data we need.&lt;/p&gt;
&lt;p&gt;Let's start by creating our spider class and giving our spider a name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.spiders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrawlSpider&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditCrawler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reddit-crawler&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;allowed_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;reddit.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it has a name and also a list of the domains it is allowed to crawl.
If it accidentally ends up with a link to some other site, our spider will obey these rules and ignore that site.
We also need to tell our spider where to start crawling and give it certain settings to prevent spamming our target site.
Most websites do not like it when users send requests in quick succession, and they will rate-limit you if you do so.
So let's tell our spider to play nice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.spiders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrawlSpider&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditCrawler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reddit-crawler&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;allowed_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;reddit.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://www.reddit.com/r/learnpython/new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;custom_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;BOT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reddit-scraper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DEPTH_LIMIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DOWNLOAD_DELAY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;custom_settings&lt;/code&gt; are things that would normally be specified in &lt;code&gt;settings.py&lt;/code&gt; when you make a crawler using the &lt;code&gt;startproject&lt;/code&gt; command.
The &lt;code&gt;DEPTH_LIMIT&lt;/code&gt; restricts the number of page links we follow.
The &lt;code&gt;DOWNLOAD_DELAY&lt;/code&gt; is the number of seconds to wait between requests.
I set it at 3 seconds, but you could get away with 1.&lt;/p&gt;
&lt;p&gt;All we have left is to define our scraping method.
This is more complicated than everything else, but still is relatively straight-forward.
There are two methods we can override in our spider that can accomplish this task.
For our purposes we will override the &lt;code&gt;parse&lt;/code&gt; method.
This parse method is a generator.
If you do not know how Python generators work then go read up on them: they are very helpful.&lt;/p&gt;
&lt;p&gt;The most difficult part of getting the &lt;code&gt;parse&lt;/code&gt; method working is your Xpath selectors.
Xpath allows you to parse the html response from webpages based on html elements.
To keep you sane I will provide each of the necessay xpaths for extracting our data from the reddit pages.
If you are using this as a reference, note that an easy way to find xpaths is to use the Chrome developer console.
Right-click on the target element on the page, then select &lt;code&gt;Inspect element&lt;/code&gt;.
This will pull up the console and highlight the target element.
Now, right-click the highlighted element and select the option for the xpath.&lt;/p&gt;
&lt;p&gt;For our xpaths we must grab the &lt;code&gt;div&lt;/code&gt; containing all of the posts, and then we must select each of the desired items from those.
We use the &lt;code&gt;Selector&lt;/code&gt; class provided by Scrapy to wrap the html response and do our dirty work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.selector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;next_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//span[@class=&amp;quot;nextprev&amp;quot;]//a/@href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_requests_from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//div[@id=&amp;quot;siteTable&amp;quot;]/div[@onclick=&amp;quot;click_thing(this)&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextPostItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div[2]/p[1]/a/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div[2]/ul/li[1]/a/@href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div[2]/p[2]/time/@title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first &lt;code&gt;yield&lt;/code&gt; is for the next page link.
It returns a Scrapy &lt;code&gt;Request&lt;/code&gt; object to use for crawling the next page.
We then grab all of the posts on the page and iterate over them.
For each post we create one of our &lt;code&gt;TextPostItem&lt;/code&gt; objects and populate it with the post url, title, and the time it was submitted.&lt;/p&gt;
&lt;p&gt;When we run this spider, Scrapy will print each &lt;code&gt;TextPostItem&lt;/code&gt; out as a dictionary to &lt;code&gt;stdout&lt;/code&gt;.
For an initial run this is fine, but eventually you might want this saved to a file.
This is also possible.&lt;/p&gt;
&lt;p&gt;To run our spider, we execute &lt;code&gt;scrapy runspider spider.py&lt;/code&gt;.
There will be lots of debugging information printed out along with our scraped data.
To save this all to a file, run &lt;code&gt;scrapy runspider spider.py -o items.json -t json&lt;/code&gt;.
This will save your scraped data as JSON to a file called &lt;code&gt;items.json&lt;/code&gt;, which you can then use for whatever purposes you desire.&lt;/p&gt;
&lt;h3&gt;Final product&lt;/h3&gt;
&lt;p&gt;Your final spider should look like the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.spiders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrawlSpider&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.selector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.item&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextPostItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;submitted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditCrawler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reddit_crawler&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;allowed_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;reddit.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://www.reddit.com/r/learnpython/new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;custom_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;BOT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reddit-scraper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DEPTH_LIMIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DOWNLOAD_DELAY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;next_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//span[@class=&amp;quot;nextprev&amp;quot;]//a/@href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_requests_from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//div[@id=&amp;quot;siteTable&amp;quot;]/div[@onclick=&amp;quot;click_thing(this)&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextPostItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div[2]/p[1]/a/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div[2]/ul/li[1]/a/@href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div[2]/p[2]/time/@title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Further possibilities&lt;/h2&gt;
&lt;p&gt;With Scrapy the possibilities are endless (not literally).
If you would like to scrape multiple subreddits, simply add links to the &lt;code&gt;start_urls&lt;/code&gt; list.
If you want to scrape other sites you can do that as well.
Maybe there is an Atom RSS feed that interests you. 
Well, you can scrape that too.&lt;/p&gt;
&lt;p&gt;Play with this spider and tweak it to your liking.
Try adding fields to the &lt;code&gt;TextPostItem&lt;/code&gt; such as one for the post author or for the number of upvotes the post has received.
Once you are comfortable with how this spider works, try writing your own!
You have the tools, so go out there and scrape!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Mon, 27 Jul 2015 00:00:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2015-07-27:scrapy-the-basics.html</guid><category>python</category><category>scrapy</category></item><item><title>Dynamically Building a Class</title><link>https://seanmckaybeck.com/dynamically-building-a-class.html</link><description>&lt;p&gt;I recently ran into a situation where a class I was writing was getting a bit hard to manage. The source file was getting so long and I got sick of scrolling back and forth through it to get to the functions I needed. Surely there must be a way to remedy this inconvenient situation!&lt;/p&gt;
&lt;p&gt;Packages in Python can help make managing lots of different classes and functionality easier. But I want to split my class' methods out of the same file. Can it be done? Of course it can.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Note that this works in both Python 2 and 3. My original class looks like the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyClass:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;one&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;two&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;print&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;one_func&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;print&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;one&lt;/span&gt;)
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;two_func&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;print&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;two&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Stupid, I know. Pretend it is significantly larger. We'll get to a more practical application later.&lt;/p&gt;
&lt;p&gt;We want to have the functions broken out into separate files. We will leave the &lt;code&gt;__init__&lt;/code&gt; function alone because moving that would be silly.&lt;/p&gt;
&lt;p&gt;Create a directory with the name of your choice. I will use &lt;code&gt;funcs&lt;/code&gt;. Then make a file for each of the functions. For ease of remembering which is which I named the files the same as the functions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;myclass.py - Our class
funcs/
|__ __init__.py
|__ hello.py
|__ one_func.py
|__ two_func.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the &lt;code&gt;__init__.py&lt;/code&gt;? That isn't for our class' &lt;code&gt;__init__&lt;/code&gt; function; it lets Python know that the directory contains a package. Now for the contents of each file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# __init__.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.hello&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.one_func&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;one_func&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.two_func&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;two_func&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sets everything up so we can &lt;code&gt;from funcs import *&lt;/code&gt; in our &lt;code&gt;myclass.py&lt;/code&gt; file. The files for each of our functions are just a copy of the function's code in the original file. So for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# hello.py
def hello(self):
    print(&amp;#39;hello&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that all of our functions are split out into their own files we can finalize our class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;funcs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;MyClass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will cycle through all of the callable objects in the global space and add them as attributes of our class. However, notice that we have to specifically ignore our class as we search for our functions to add. If we imported other functions we would have to ignore them as well, or we could do the imports after our functions are added to the class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;funcs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;MyClass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;join&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Practical Application&lt;/h2&gt;
&lt;p&gt;Why would you ever want to do this? Say you have a class that may require constant maintenance. Maybe you are adding in new functions or getting rid of deprecated ones. This could help you manage that.&lt;/p&gt;
&lt;p&gt;Say your program requires some sort of command interpreter. Python makes this easy with the &lt;code&gt;cmd&lt;/code&gt; module. Commands for your custom interpreter follow a certain format, being that the function names all start with &lt;code&gt;do_&lt;/code&gt;. This makes it easier to pick out the right functions to add to our class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# mycmd.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;funcs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyCmdInterpreter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;do_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyCmdInterpreter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;MyCmdInterpreter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mycmd.py
funcs/
|__ __init__.py
|__ do_hello.py
|__ do_something.py
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# __init__.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.do_hello&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;do_hello&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.do_something&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;# do_hello.py
def do_hello(self):
    print(&amp;#39;hello!&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;# do_something.py
def do_something(self, line):
    print(&amp;#39;doing something with the line&amp;#39;)
    print(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now when you run &lt;code&gt;mycmd.py&lt;/code&gt; you will have a command interpreter that knows your two commands: hello and something! This is just one application of a basic but useful idea.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sat, 18 Jul 2015 21:49:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2015-07-18:dynamically-building-a-class.html</guid><category>python</category><category>how-to</category></item><item><title>Running Terraria on Linux</title><link>https://seanmckaybeck.com/running-terraria-on-linux.html</link><description>&lt;p&gt;After a significant amount of issues I finally was able to get Terraria running on Linux using &lt;code&gt;wine-staging&lt;/code&gt;. &lt;code&gt;wine-staging&lt;/code&gt; is &lt;code&gt;wine&lt;/code&gt; with more bugfixes. It is not a stable version of &lt;code&gt;wine&lt;/code&gt; but it is stable enough and has improved features.&lt;/p&gt;
&lt;p&gt;I use Arch Linux so instructions will apply to my particular installation. I cannot guarantee this will work on other distros, although I hope it will. &lt;/p&gt;
&lt;p&gt;&lt;img alt="screenfetch" src="/content/images/2015/03/Screenshot-from-2015-03-11-15-33-26.png" /&gt;&lt;/p&gt;
&lt;p&gt;First you need to install &lt;code&gt;winetricks&lt;/code&gt; and &lt;code&gt;wine-staging&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://winetricks.org/winetricks
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x winetricks
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp winetricks /usr/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For &lt;code&gt;wine-staging&lt;/code&gt; follow the &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;documented installation steps&lt;/a&gt; for your distribution. Then add it to your path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:/opt/wine-staging/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to install dependencies for Terraria. Please follow these steps exactly. Assuming you followed the prior steps correctly this will work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.wine32 &lt;span class="nv"&gt;WINEARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;win32 winetricks dotnet40
&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.wine32 winetricks xna40
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now download and install the &lt;a href="http://media.steampowered.com/client/installer/SteamSetup.exe"&gt;Windows version of Steam&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.wine32 wine path/to/steam/executable/SteamSetup.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When it is finished don't run Steam. If you do run Steam it won't have any text. To run Steam do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.wine32 wine ~/.wine32/drive_c/Program&lt;span class="se"&gt;\ &lt;/span&gt;Files/Steam/Steam.exe -no-dwrite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now download and install Terraria within Steam. After this is done you can play Terraria! If you are used to playing on Windows the game content is saved to &lt;code&gt;My Games/Terraria&lt;/code&gt;. With wine this &lt;code&gt;My Games&lt;/code&gt; folder is in your user's home directory (&lt;code&gt;~/My\ Games&lt;/code&gt;), so if you want to fiddle with world or character files that is the place to check. &lt;/p&gt;
&lt;p&gt;I have not tried running Terraria from within Steam. I have been running it directly through wine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.wine32 wine ~/.wine32/drive_c/Program&lt;span class="se"&gt;\ &lt;/span&gt;Files/Steam/steamapps/common/Terraria/Terraria.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you did everything correctly it should be working! Make sure to ALWAYS use &lt;code&gt;WINEPREFIX=~/.wine32&lt;/code&gt; when working with this wine installation. It makes it work on a 64-bit system. &lt;code&gt;winetricks&lt;/code&gt; uses &lt;code&gt;wine&lt;/code&gt; under the hood so make sure to specify the &lt;code&gt;WINEPREFIX&lt;/code&gt; there as well.&lt;/p&gt;
&lt;h3&gt;Other issue&lt;/h3&gt;
&lt;p&gt;Currently I have no sound from the game. This is a known issue. See &lt;a href="https://appdb.winehq.org/objectManager.php?sClass=version&amp;amp;iId=24915"&gt;this&lt;/a&gt; post and look for the issue called "No sound". There are possible fixes but they have not worked for me. If you run into this same issue please check that link and follow the possible fixes there.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Wed, 11 Mar 2015 19:57:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2015-03-11:running-terraria-on-linux.html</guid><category>how-to</category></item><item><title>Simple Display</title><link>https://seanmckaybeck.com/simple-display.html</link><description>&lt;p&gt;I made a basic setup that displays the current price of silver per ounce.&lt;/p&gt;
&lt;h6&gt;Materials&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;1 Raspberry Pi model B&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.adafruit.com/products/420"&gt;1 16x32 display from Adafruit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13 female/female jumper wires&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.adafruit.com/products/276"&gt;1 5V 2A DC power supply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.adafruit.com/products/368"&gt;1 female DC power adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used the Arch Linux image for the Raspberry Pi's operating system. Follow &lt;a href="https://learn.adafruit.com/connecting-a-16x32-rgb-led-matrix-panel-to-a-raspberry-pi/wiring-the-display"&gt;this&lt;/a&gt; guide for wiring the display to the Pi. Once you have the operating system set up you need the proper software. Use &lt;a href="https://learn.adafruit.com/connecting-a-16x32-rgb-led-matrix-panel-to-a-raspberry-pi/testing"&gt;this&lt;/a&gt; guide for installing the necessary software for the display. In order to work with my code you need Python 3.4 and you need &lt;code&gt;libfreetype&lt;/code&gt; installed. On Arch you can install it with &lt;code&gt;pacman -S freetype2&lt;/code&gt;. You will also need &lt;code&gt;Pillow&lt;/code&gt; which can be installed with &lt;code&gt;pip install pillow&lt;/code&gt;. Make sure you install &lt;code&gt;libfreetype&lt;/code&gt; before &lt;code&gt;pillow&lt;/code&gt;. The font used in the code is also based on the path on Arch.&lt;/p&gt;
&lt;h6&gt;The Code&lt;/h6&gt;
&lt;p&gt;Note that this must be saved and run from within the install directory of the matrix code. Every ten minutes it will grab the current price per ounce of silver, create a &lt;code&gt;ppm&lt;/code&gt; image in the specified font, then display it as a scrolling message on the LED matrix.&lt;/p&gt;
&lt;script src="https://gist.github.com/ThaWeatherman/08a4bac104601e8e3fb1.js"&gt;&lt;/script&gt;

&lt;p&gt;Note that a good chunk of this (the display code) was taken from the Adafruit tutorial.&lt;/p&gt;
&lt;h6&gt;The Result&lt;/h6&gt;
&lt;p&gt;I can't get the Imgur gifv or Gfycat images to embed properly here so below are the links (higher quality is better!).&lt;/p&gt;
&lt;p&gt;http://gfycat.com/GrotesqueImpishDrafthorse
http://i.imgur.com/vXqUxLG.gifv&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Mon, 02 Mar 2015 03:21:00 -0500</pubDate><guid>tag:seanmckaybeck.com,2015-03-02:simple-display.html</guid><category>electronics</category><category>raspberry-pi</category></item><item><title>Motion Detection for Home Security</title><link>https://seanmckaybeck.com/motion-detection-for-home-security.html</link><description>&lt;p&gt;Have you ever wanted a security system to know when someone breaks into your home? Those systems are so expensive though and buying one is not as fun as making your own. Using an Arduino and a PIR sensor I was able to make my own intruder detection system. &lt;/p&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;The Arduino is a great platform for small or large electronics projects. It is fairly easy to learn and there are tons of libraries already written to make coding for it simpler. This project utilizes the Arduino and a PIR sensor to make a intruder detection system that emails you when motion is detected.&lt;/p&gt;
&lt;h2&gt;Parts&lt;/h2&gt;
&lt;p&gt;The following is a list of the parts I used to complete this project. Note that soldering is required to put the CC3000 shield together. Adafruit has a &lt;a href="https://learn.adafruit.com/adafruit-cc3000-wifi/cc3000-shield"&gt;guide&lt;/a&gt; on how to take care of that. You will also need to update the firmware of the CC3000.&lt;/p&gt;
&lt;p&gt;Some of the links below will take you to Radio Shack. If you can, go pick those up ASAP as Radio Shack is selling half of its stores so discounts are substantial. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.adafruit.com/products/758"&gt;6 male-to-male wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.radioshack.com/modular-ic-breadboard-socket/2760003.html"&gt;1 mini-breadboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vetco.net/catalog/product_info.php?products_id=9942&amp;amp;gclid=CMPO3JWL2MMCFdgHgQodTYAA2A"&gt;1 LED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.adafruit.com/product/50"&gt;1 Arduino Uno R3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.adafruit.com/product/1491"&gt;1 Adafruit CC3000 shield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.radioshack.com/radioshack-passive-infrared-sensor/2760347.html"&gt;1 PIR sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will need the Arduino IDE installed on your computer. You can download it for your system from &lt;a href="http://arduino.cc/en/Main/Software"&gt;here&lt;/a&gt;. Make sure to download version 1.0.6 as the CC3000 does not get along so well with 1.6.0.  Also note that there are some other things required to complete the install. Use &lt;a href="http://arduino.cc/en/Guide/HomePage"&gt;this&lt;/a&gt; as a reference.&lt;/p&gt;
&lt;p&gt;Finally the code for this project uses code from Temboo. Temboo makes working with the Arduino easier. Go create an account at https://www.temboo.com. I then used the code found &lt;a href="https://www.temboo.com/library/Library/Google/Gmail/SendEmail/"&gt;here&lt;/a&gt; to handle the emailing functionality.&lt;/p&gt;
&lt;h2&gt;Wiring&lt;/h2&gt;
&lt;p&gt;I did my best to get some pictures of the wiring which you can see below. 
&lt;img alt="" src="/content/images/2015/02/above.jpg" /&gt;
&lt;img alt="" src="/content/images/2015/02/side.jpg" /&gt;
&lt;img alt="" src="/content/images/2015/02/arduino.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Plug your PIR sensor into the breadboard. It does not really matter where but it was easier to clump everything together on the end for me. Notice in the following picture of the PIR sensor from left to right the pins are GND, VCC, and OUT. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2015/02/PIR.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Based on where you plug in your sensor you can now use the following diagram to do the wiring. I apologize that my Paint skills are not the best. Please note that the purple wire in the drawing is the white wire in the above pictures. Also note that the short end of the LED is on the left in the diagram even though it looks like the short end is the right (again, crappy Paint skills). &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2015/02/diagram.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;The code is MIT licensed so feel free to use it and modify it. Make sure to fill in the necessary values for your wireless connection and your Temboo app profile.&lt;/p&gt;
&lt;script src="https://gist.github.com/ThaWeatherman/234dfab2bfd13487d11b.js"&gt;&lt;/script&gt;

&lt;h2&gt;Working product&lt;/h2&gt;
&lt;p&gt;You should now have a fully working product. The LED is there to let you know quickly that the circuitry and code is all good. If it lights up when you move in front of the sensor then you are good to go!&lt;/p&gt;
&lt;iframe width="1280" height="720" src="https://www.youtube.com/embed/LahtYaoWLso?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h6&gt;References&lt;/h6&gt;
&lt;p&gt;Code for working with the LED and the PIR sensor was taken from &lt;a href="https://raw.githubusercontent.com/jedgarpark/Make_PIR_Sensor/master/MAKE_PIR_Sensor.pde"&gt;here&lt;/a&gt;. The original idea came from &lt;a href="http://makezine.com/projects/pir-sensor-arduino-alarm/"&gt;here&lt;/a&gt; but I took it and made it better. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Thu, 12 Feb 2015 01:06:00 -0500</pubDate><guid>tag:seanmckaybeck.com,2015-02-12:motion-detection-for-home-security.html</guid><category>security</category><category>arduino</category><category>electronics</category></item><item><title>Wrapping Python requests in a SOCKS5 proxy</title><link>https://seanmckaybeck.com/wrapping-python-requests-in-a-socks5-proxy.html</link><description>&lt;p&gt;I have run into situations when I wanted to route some of my Python requests out to the internet through a SOCKS5 proxy, specifically through &lt;a href="https://www.torproject.org/"&gt;Tor&lt;/a&gt;. There are answers out there on Stack Overflow but they are not all extremely clear.&lt;/p&gt;
&lt;p&gt;The easiest way to wrap all requests done by a Python module in a SOCKS proxy is to use the SocksiPy library. The project was abandoned by its owner around 2007. Someone made a few modifications after that, but also abandoned it eventually in 2010. Thankfully the code still works! The latest version can be downloaded from &lt;a href="https://code.google.com/p/socksipy-branch/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install, simply move the &lt;code&gt;socks.py&lt;/code&gt; file into your Python installation's library directory (&lt;code&gt;/usr/local/lib/python2.7/dist-packages&lt;/code&gt; for me on Crunchbang).&lt;/p&gt;
&lt;p&gt;Using it is also simple. Just import the module, set the proxy information, then wrap the module you want to have proxied. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socks&lt;/span&gt;

&lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultproxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROXY_TYPE_SOCKS5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9050&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapmodule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this all things done by smtplib will be sent through your proxy. The above code is designed to work with a running local &lt;code&gt;tor&lt;/code&gt; installation. &lt;/p&gt;
&lt;p&gt;This is a great and simple solution to all your proxy needs (SOCKS4, SOCKS5, or HTTP).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Mon, 09 Feb 2015 23:18:00 -0500</pubDate><guid>tag:seanmckaybeck.com,2015-02-09:wrapping-python-requests-in-a-socks5-proxy.html</guid><category>python</category><category>how-to</category></item><item><title>Learning Pandas using Workout Data</title><link>https://seanmckaybeck.com/learning-pandas-using-workout-data.html</link><description>&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pandas&lt;/code&gt; is a data analysis library for Python. It is extremely useful and fairly straightforward to work with. To see how simple it is we will look at some of my lifting data using &lt;code&gt;pandas&lt;/code&gt; and graph it using &lt;code&gt;matplotlib&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;Read it in&lt;/h2&gt;
&lt;p&gt;The data is saved in a CSV which &lt;code&gt;pandas&lt;/code&gt; can easily load and manipulate. Let's begin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;read_csv&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stronglifts.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;This prints - &lt;/span&gt;

&lt;span class="sd"&gt;Index([u&amp;#39;Date&amp;#39;, u&amp;#39;Note&amp;#39;, u&amp;#39;Workout&amp;#39;, u&amp;#39;Body Weight&amp;#39;, u&amp;#39;Exercise 1&amp;#39;, u&amp;#39;Weight (KG)&amp;#39;, u&amp;#39;Weight (LB)&amp;#39;, u&amp;#39;Set 1&amp;#39;, u&amp;#39;Set 2&amp;#39;, u&amp;#39;Set 3&amp;#39;, u&amp;#39;Set 4&amp;#39;, u&amp;#39;Set 5&amp;#39;, u&amp;#39;Exercise 2&amp;#39;, u&amp;#39;Weight (KG).1&amp;#39;, u&amp;#39;Weight (LB).1&amp;#39;, u&amp;#39;Set 1.1&amp;#39;, u&amp;#39;Set 2.1&amp;#39;, u&amp;#39;Set 3.1&amp;#39;, u&amp;#39;Set 4.1&amp;#39;, u&amp;#39;Set 5.1&amp;#39;, u&amp;#39;Exercise 3&amp;#39;, u&amp;#39;Weight (KG).2&amp;#39;, u&amp;#39;Weight (LB).2&amp;#39;, u&amp;#39;Set 1.2&amp;#39;, u&amp;#39;Set 2.2&amp;#39;, u&amp;#39;Set 3.2&amp;#39;, u&amp;#39;Set 4.2&amp;#39;, u&amp;#39;Set 5.2&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was easy! No special iterative reading of rows and columns required. Pandas takes the CSV and loads it for you into the pandas' &lt;code&gt;DataFrame&lt;/code&gt; object. The DataFrame is what you will more than likely use the most when using pandas. &lt;/p&gt;
&lt;h2&gt;Work with the data&lt;/h2&gt;
&lt;p&gt;This workout data is specific to the &lt;a href="http://stronglifts.com/5x5"&gt;Stronglifts 5x5&lt;/a&gt; lifting routine which uses bench press, squats, overhead press, deadlift, and barbell row in its workouts. The &lt;code&gt;Exercise 2&lt;/code&gt; column will either be "Bench press" or "Overhead press" and the &lt;code&gt;Exercise 3&lt;/code&gt; column will either be "Deadlift" or "Barbell row". In order to play with the information on a per-lift basis we need to extract it into lists. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;overhead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;barbell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deadlift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Exercise 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Overhead press&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;overhead&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;bench&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Exercise 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Deadlift&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;deadlift&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;barbell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that the data is organized into lists of tuples we can do whatever we like with it! In this case I will make a graph showing my progress in each of the lifts. &lt;/p&gt;
&lt;h2&gt;Graph it&lt;/h2&gt;
&lt;p&gt;To test the code I will only graph my squat data. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.dates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date2num&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticklabels&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autofmt_xdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myplot.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That produces the following. &lt;/p&gt;
&lt;p&gt;&lt;img alt="squat graph" src="/content/images/2014/Aug/myplot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Following the same process we can graph all of the lift data. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.dates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date2num&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;xtick&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labelsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;squat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticklabels&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squat&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autofmt_xdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bench&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;overhead&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;overhead&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;overhead&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;barbell&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;barbell&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;y-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;barbell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;deadlift&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;deadlift&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;deadlift&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;upper left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myplot_all.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="everything" src="/content/images/2014/Aug/myplot_all.png" /&gt;&lt;/p&gt;
&lt;p&gt;Since I squat every time I lift I could use its date values for the x axis and never have to reconfigure it to use different dates for the other lifts. &lt;code&gt;matplotlib&lt;/code&gt; handles all of the graph construction for us, making visualization much easier.&lt;/p&gt;
&lt;p&gt;Now we have a nice visualization of the data! There are plenty of other things I could do with the data, but this is intended to be introductory. &lt;code&gt;pandas&lt;/code&gt; makes working with CSVs simple so we can focus on wrangling our data. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Fri, 22 Aug 2014 22:12:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-08-22:learning-pandas-using-workout-data.html</guid><category>python</category><category>data-science</category></item><item><title>Visualizing Twitter data</title><link>https://seanmckaybeck.com/visualizing-twitter-data.html</link><description>&lt;p&gt;Data visualization is awesome. Who doesn't enjoy looking at cool graphs of various data? &lt;/p&gt;
&lt;p&gt;I decided to capitalize on the recent events in Ferguson, MO and practice my data crunching skills by looking at patterns in words used in tweets. I am still fairly new to the data science field so this was an exercise to get my feet wet. &lt;/p&gt;
&lt;h2&gt;Keywords are easy&lt;/h2&gt;
&lt;p&gt;I began with simple keyword searches. I was watching Jurassic Park and it was late so I did not want to stretch my brain further than it was capable. &lt;/p&gt;
&lt;p&gt;After watching the Twitter feed for &lt;code&gt;#Ferguson&lt;/code&gt; for some time I decided on a few words that seemed to come up often or that seemed relevant. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;white
racist
ftp
tear gas
rifle
camera
milk
loot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes lots of other words are missing such as &lt;code&gt;black&lt;/code&gt; but this was good enough to get a feel for what I was doing. &lt;/p&gt;
&lt;p&gt;In order to interact with Twitter I used a Python module called &lt;code&gt;tweepy&lt;/code&gt;. &lt;code&gt;tweepy&lt;/code&gt; seems to be one of the more popular choices by Pythonistas and it is easy to use. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;tweepy&lt;/code&gt; provides a class for listening to Twitter streams. This allows for real time monitoring of whatever keywords your heart desires. Using it is as simple as creating a subclass of &lt;code&gt;tweepy.StreamListener&lt;/code&gt; and carrying out the desired behavior when a tweet is seen. I wanted it to count the total number of tweets seen and the count of each word as it is seen. &lt;/p&gt;
&lt;p&gt;This is the result.&lt;/p&gt;
&lt;script src="https://gist.github.com/ThaWeatherman/9a2151fcf23bf66844d0/fe2dcfe9904f527121956c8c7cb0e948c76d1694.js"&gt;&lt;/script&gt;

&lt;p&gt;It is by no means elegant (remember, the velociraptors were hunting everyone at this point), but it does the job. A cleaner solution would have contained the keywords in a list and had a dictionary to track the counts. Printing would have been cleaner this way as well. &lt;/p&gt;
&lt;p&gt;The script itself is simple. When a tweet is seen it checks for the desired words and if a word is found that word's count is incremented. Then the total counts are printed for viewing. &lt;/p&gt;
&lt;p&gt;I let this script run for 12 hours and the final result was the following. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;----------GOT A TWEET-----------
total is 314259
number with &amp;#39;racist&amp;#39; is 2933
number with &amp;#39;white&amp;#39; is 10230
number with &amp;#39;ftp&amp;#39; is 624
number with &amp;#39;tear gas&amp;#39; is 2207
number with &amp;#39;rifle&amp;#39; is 1140
number with &amp;#39;camera&amp;#39; is 1735
number with &amp;#39;milk&amp;#39; is 569
number with &amp;#39;loot&amp;#39; is 2508
--------------------------------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not a bad first attempt! But I can do better than just keyword searches. &lt;/p&gt;
&lt;h2&gt;Track all the words!&lt;/h2&gt;
&lt;p&gt;It is more interesting to see which words &lt;em&gt;actually&lt;/em&gt; appear the most rather than guessing which ones &lt;em&gt;might&lt;/em&gt; appear the most. &lt;/p&gt;
&lt;p&gt;Instead of tracking keywords we have our custom stream listener store a dictionary mapping words to the number of times they appear in tweets. We do not want to track words like "the" or "an" so we make sure to filter those out. We also do not want to track URLs for this specific experiment so we filter those out as well. However it would be interesting to look at which links are shared the most in a different experiment. Finally we filter out usernames. &lt;/p&gt;
&lt;p&gt;Since the stream is constantly running we need a way to save the data. Ideally we would save the data every minute or so, but for now saving it when the script stops running is good enough. &lt;/p&gt;
&lt;p&gt;The final result is the following. &lt;/p&gt;
&lt;script src="https://gist.github.com/ThaWeatherman/9a2151fcf23bf66844d0.js?file=analyze.py"&gt;&lt;/script&gt;

&lt;p&gt;Note that since everything is stored in memory you should not let this script run for more than a few hours unless you have a lot of memory to work with.&lt;/p&gt;
&lt;p&gt;Having all of this data is cool, but visualizations are even more cool. I decided to use word clouds to give an idea of which words appear the most frequently. &lt;/p&gt;
&lt;p&gt;I began with a 15 minute test run of the script. Unfortunately I do not have the total number of tweets seen, but the result is about what you would expect. &lt;/p&gt;
&lt;p&gt;&lt;img alt="15 minute run" src="/content/images/2014/Aug/example_cloud.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some words I did not expect showed up such as "nacional" (is that a word?), "livingblessed", and "mirror". Either way it worked so now it was time to do a longer run.&lt;/p&gt;
&lt;h3&gt;The final result&lt;/h3&gt;
&lt;p&gt;Because of the dataset size and file size limits on the web services I used for making the word clouds I only let it run for two hours. The final JSON file was about 1.1 MB, and after converting it to a giant block of text for feeding to the word cloud generators it was ~5.2 MB. This was too large so I ignored words with counts less than 10 and removed "ferguson", bringing the size down to ~4.2 MB. In total the script saw 64845 tweets. &lt;/p&gt;
&lt;p&gt;This one is from &lt;a href="http://www.wordle.net/create"&gt;Wordle&lt;/a&gt;.
&lt;img alt="wordle final" src="/content/images/2014/Aug/final_cloud.png" /&gt;&lt;/p&gt;
&lt;p&gt;This one is from &lt;a href="http://www.jasondavies.com/wordcloud/#%2F%2Fwww.jasondavies.com%2Fwordtree%2Fcat-in-the-hat.txt"&gt;Jason Davies&lt;/a&gt;.
&lt;img alt="tag crowd final" src="/content/images/2014/Aug/download.png" /&gt;&lt;/p&gt;
&lt;p&gt;I also used &lt;a href="http://tagcrowd.com/"&gt;Tag Crowd&lt;/a&gt;, but I liked these two the best with Wordle being my favorite. &lt;/p&gt;
&lt;p&gt;The words are pretty much the same as those from the 15 minute run. &lt;/p&gt;
&lt;p&gt;From this data we can see the general feeling towards the events in Ferguson and we can gain an understanding of the most talked about events or people. Data analysis helps open the door to understanding the big picture and this simple word analysis in only the beginning!&lt;/p&gt;
&lt;h4&gt;Materials used&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;tweepy&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;Python 2.7.5&lt;/li&gt;
&lt;li&gt;Wordle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See all of it &lt;a href="https://gist.github.com/ThaWeatherman/9a2151fcf23bf66844d0"&gt;here on Github&lt;/a&gt;. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Fri, 22 Aug 2014 00:16:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-08-22:visualizing-twitter-data.html</guid><category>python</category><category>data-science</category></item><item><title>Ensuring PEP 8 compliance using Git hooks</title><link>https://seanmckaybeck.com/ensuring-pep-8-compliance-using-git-hooks.html</link><description>&lt;p&gt;PEP 8 is the Python language's style guide. It is accepted by the community as the best standards for any Python code. &lt;code&gt;Pylint&lt;/code&gt; is a program for checking Python style. We can ensure all of our Python code is clean and elegant using Git hooks. &lt;/p&gt;
&lt;h2&gt;What are hooks?&lt;/h2&gt;
&lt;p&gt;Git hooks are essentially scripts that run before or after you perform various actions in &lt;code&gt;git&lt;/code&gt;. Some examples are a script that runs before a commit, after a commit, or after a merge. These scripts are stored in a repository's &lt;code&gt;.git/hooks&lt;/code&gt; folder. They can be written in a variety of languages but are most commonly written in Bash, Python, Ruby, or Perl.&lt;/p&gt;
&lt;h2&gt;PEP 8 Compliance&lt;/h2&gt;
&lt;p&gt;We can check our code for compliance using &lt;code&gt;pylint&lt;/code&gt; and &lt;code&gt;pep8&lt;/code&gt;. To install these use the following commands. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pep8
apt-get install pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may also need to use &lt;code&gt;sudo&lt;/code&gt; if you are not the root user when executing these commands. If you are on a Red Hat based linux system use &lt;code&gt;yum&lt;/code&gt; instead of &lt;code&gt;apt-get&lt;/code&gt;. If you are on OS X or Windows then &lt;a href="http://lmgtfy.com/?q=how+to+install+linux"&gt;go do some Googling&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Step 1: The script&lt;/h2&gt;
&lt;p&gt;Before we can do anything we need to write our script. It needs to check each Python source file against &lt;code&gt;pep8&lt;/code&gt; followed by &lt;code&gt;pylint&lt;/code&gt;. If &lt;code&gt;pep8&lt;/code&gt; finds any errors or if &lt;code&gt;pylint&lt;/code&gt; has a score less than 9.00/10 it should exit with a failed status code. You can decide what score your code should pass with in &lt;code&gt;pylint&lt;/code&gt;, but I like 9/10 as it means the code is near perfect. Ideally it would pass with 10/10 but sometimes that just is not possible. &lt;/p&gt;
&lt;script src="https://gist.github.com/ThaWeatherman/f7ae231e85d74b62e049.js?file=pre-commit"&gt;&lt;/script&gt;

&lt;p&gt;This is our final script. It is a little rough around the edges but I had to do some hacky things to extract the &lt;code&gt;pylint&lt;/code&gt; score.&lt;/p&gt;
&lt;h2&gt;Step 2: Add it to your repo&lt;/h2&gt;
&lt;p&gt;Now that we have a working script we need the git repository to recognize the hook. Make your script executable using&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;chmod 744 pre-commit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where &lt;code&gt;pre-commit&lt;/code&gt; is the name of your script. Now move it to the repository's &lt;code&gt;.git/hooks&lt;/code&gt; folder and it is good to go! Note that for every repository you want to use this hook in you must add this script.&lt;/p&gt;
&lt;h2&gt;Step 3: Commit as normal&lt;/h2&gt;
&lt;p&gt;You can test that it works by trying to do a commit. Because it is the &lt;code&gt;pre-commit&lt;/code&gt; script it will run before the commit is finalized. If it passes then the code is committed, otherwise it will fail and tell you why it failed. &lt;/p&gt;
&lt;p&gt;You can use the following example code to demonstrate that it works. The first file is a fully compliant example while the other is vile. Initialize a git repo, add the &lt;code&gt;pre-commit&lt;/code&gt; script and these two files, then try a commit and see what happens. &lt;/p&gt;
&lt;script src="https://gist.github.com/ThaWeatherman/f7ae231e85d74b62e049.js?file=good.py"&gt;&lt;/script&gt;

&lt;script src="https://gist.github.com/ThaWeatherman/f7ae231e85d74b62e049.js?file=bad.py"&gt;&lt;/script&gt;

&lt;h2&gt;Additional reading&lt;/h2&gt;
&lt;p&gt;If you would like to understand each of these topics better please read through the following links. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://githooks.com/"&gt;Git hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; the style guide&lt;/li&gt;
&lt;li&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0257/"&gt;PEP 257&lt;/a&gt; docstring conventions&lt;/li&gt;
&lt;li&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt; Zen of Python&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Wed, 20 Aug 2014 15:11:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-08-20:ensuring-pep-8-compliance-using-git-hooks.html</guid><category>python</category></item><item><title>Zapping Rachel</title><link>https://seanmckaybeck.com/zapping-rachel.html</link><description>&lt;p&gt;I went to DEF CON for the first time about a week ago and I must say it was quite enjoyable. There were all sorts of things to participate in. One of these things was a contest put on by the FTC called &lt;a href="http://www.ftc.gov/zapping-rachel"&gt;Zapping Rachel&lt;/a&gt;. The contest focused on the problems and annoyances caused by robocalls and aimed to find ways to address the issue. Contestants could create a honey pot for robocalls, find vulnerabilities in the honey pots, or analyze a data set and determine whether or not each phone call was a robocall. I decided to analyze data as I wanted to use the &lt;code&gt;pandas&lt;/code&gt; Python module for something but have not had any large data sets to work with. &lt;/p&gt;
&lt;p&gt;The FTC provided two datasets: one an example and the other to analyze. The data only contained the time of the phone call, the caller, and the receiver. Yes that sucks but if you think about it there really is not anything else to go off of in a situation like this. &lt;/p&gt;
&lt;p&gt;I ended up coming in second place. 61 people signed up for this phase, and I have no idea how many people submitted something, but I came in second and won some money which paid for the whole trip. So thaat's awesome. Here is how I did it.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;If you just want to look at the data and my code &lt;a href="https://github.com/ThaWeatherman/zapping_rachel_3_solution"&gt;please feel free&lt;/a&gt;. In hindsight the best thing to do would have been to use some sort of machine learning. But I do not know anything about that so I winged it.&lt;/p&gt;
&lt;p&gt;It was a lot of data to go through but I found two general trends. Between 4 AM and noon there were a very, very small number of robocalls. Also, if a number called more than five people it was probably a robot. I separated the data from the example set into robocalls and normal calls (this was provided) and found general trends. But each trend had exceptions. Most people in the normal set only called one number, but there were some robots who only called one number. Most robots called more than five numbers, but there were some people who did this too. Area codes were unhelpful. It really boiled down to my two general trends (even though the latter had a few exceptions). &lt;/p&gt;
&lt;p&gt;So I only filtered based on time of call being between 4 AM and noon and calls to greater than five numbers. I guarantee I missed a lot of robots and also qualified a few humans as robots, but I got the points I needed. At this point I wanted to go pick locks so I strategized based on the &lt;a href="http://www.ftc.gov/zapping-rachel/rules"&gt;contest rules&lt;/a&gt;. I wanted maximum points gained while losing very few and this was the best approach. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I submitted my hack answer and went on with life, only to be surprised with the email stating I actually did well. Unfortunately I have only been able to find one other person's solution online. See it &lt;a href="https://github.com/y4n9squared/defcon"&gt;here&lt;/a&gt;. Basically it is something complex and intelligent.&lt;/p&gt;
&lt;p&gt;I would like to set up a honey pot for robocalls and help with this problem. No one should have to deal with robots on the phone. It's bad enough we have to go through the crappy robot menus when calling any and every store now. If you get a robot call &lt;strong&gt;from someone other than a charity&lt;/strong&gt; make sure to report the number. Together we can stop the rise of the machines!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sun, 17 Aug 2014 04:20:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-08-17:zapping-rachel.html</guid><category>python</category><category>data-science</category><category>defcon</category></item><item><title>Improving Readability with PEP 8</title><link>https://seanmckaybeck.com/improving-readability-with-pep-8.html</link><description>&lt;p&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; is the Python language's style guide. It is generally accepted by the Python community as the best guidelines for readability. To prove it we are going to take poorly written code and improve it to follow the &lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; guidelines. Before following this you should read through &lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; so you have an idea of the different guidelines. You should also install two tools called &lt;code&gt;pep8&lt;/code&gt; and &lt;a href="http://www.pylint.org/"&gt;&lt;code&gt;pylint&lt;/code&gt;&lt;/a&gt;. You can run them on each of your source files to check for excellent styling. Install &lt;code&gt;pep8&lt;/code&gt; via pip &lt;code&gt;pip install pep8&lt;/code&gt; and &lt;code&gt;pylint&lt;/code&gt; through your package manager (unless you're on OS X or Windows...then use pip). &lt;/p&gt;
&lt;p&gt;Here is our starting source file. It is the code I used as a proof-of-concept for an attack on a &lt;a href="https://seanmckaybeck.com/2014/06/06/spamming-a-submission-system/"&gt;submission system&lt;/a&gt; and it could use some cleaning. Please note as the actual source file differs slightly from what is shown below, so some of the error messages may refer to lines differently, and some lines may not have errors mentioned about them even though they are problematic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;\&amp;quot;(.+?)\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;word_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;To prove you are a human type&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://suchredacted.bike&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Jargon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Given-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Family-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num_to_spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
    &lt;span class="n"&gt;degree_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Undergraduate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Masters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Doctorate&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;advisors_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;169&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;171&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_127&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_129&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_132&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# all valid cs teachers&lt;/span&gt;
    &lt;span class="c"&gt;# sp4m that submission system!&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_spam&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@gmail.com&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;degree_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# this is the code for computer science&lt;/span&gt;
        &lt;span class="n"&gt;faculty_advisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;abstract_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;degree_level&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;faculty_advisor&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abstract_title&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="s"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;degree_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;degree_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;department&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;faculty_advisor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;faculty_advisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;abstract_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;abstract&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Finished spamming the submission system&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's run &lt;code&gt;pep8&lt;/code&gt; on it and see what happens. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;byu_abstract_exploit/break_abstract_submission.py:6:1: E302 expected 2 blank lines, found 1
byu_abstract_exploit/break_abstract_submission.py:10:1: E302 expected 2 blank lines, found 1
byu_abstract_exploit/break_abstract_submission.py:16:1: E302 expected 2 blank lines, found 1
byu_abstract_exploit/break_abstract_submission.py:21:1: E302 expected 2 blank lines, found 1
byu_abstract_exploit/break_abstract_submission.py:29:80: E501 line too long (88 &amp;gt; 79 characters)
byu_abstract_exploit/break_abstract_submission.py:37:22: E201 whitespace after &amp;#39;[&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:37:62: E202 whitespace before &amp;#39;]&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:38:22: E201 whitespace after &amp;#39;[&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:38:62: E202 whitespace before &amp;#39;]&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:38:64: E261 at least two spaces before inline comment
byu_abstract_exploit/break_abstract_submission.py:38:80: E501 line too long (87 &amp;gt; 79 characters)
byu_abstract_exploit/break_abstract_submission.py:44:49: E231 missing whitespace after &amp;#39;,&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:45:25: E261 at least two spaces before inline comment
byu_abstract_exploit/break_abstract_submission.py:46:52: E231 missing whitespace after &amp;#39;,&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:48:80: E501 line too long (124 &amp;gt; 79 characters)
byu_abstract_exploit/break_abstract_submission.py:50:17: E201 whitespace after &amp;#39;{&amp;#39;
byu_abstract_exploit/break_abstract_submission.py:50:43: W291 trailing whitespace
byu_abstract_exploit/break_abstract_submission.py:51:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:52:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:53:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:54:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:55:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:56:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:57:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:58:17: E128 continuation line under-indented for visual indent
byu_abstract_exploit/break_abstract_submission.py:59:17: E124 closing bracket does not match visual indentation
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well that is a lot of errors. This is not unexpected as you can just look at the original code and see that it is not very readable. Thankfully &lt;code&gt;pep8&lt;/code&gt; is specific about what the errors are and how to fix them. Let's start right from the top and fix the first four errors. &lt;/p&gt;
&lt;p&gt;According to PEP 8 it is ideal for global functions to be separated by two blank lines. This makes it easier to distinguish between the end of one function and the beginning of the next. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def grab_the_page(url):
    r = requests.get(url)
    while r.status_code != 200:
        r = requests.get(url)
    return r.content


def grab_the_word_key(content):
    soup = BeautifulSoup(content)
    word_key = soup.find_all(&amp;#39;input&amp;#39;, attrs={&amp;#39;name&amp;#39;: &amp;#39;word_key&amp;#39;})
    return str(int(word_key[0][&amp;#39;value&amp;#39;]))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the difference? This is much more preferrable to one blank line or none at all. &lt;/p&gt;
&lt;p&gt;The next large set of errors is complaining about the indentation level of the key-value pairs in the dictionary &lt;code&gt;data&lt;/code&gt;. By PEP 8's rules it is much easier to read through a dictionary like &lt;code&gt;data&lt;/code&gt; if all of the contents are aligned. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;data = {&amp;#39;first_name&amp;#39;: first_name, 
        &amp;#39;last_name&amp;#39;: last_name,
        &amp;#39;email&amp;#39;: email,
        &amp;#39;degree_level&amp;#39;: degree_level,
        &amp;#39;department&amp;#39;: department,
        &amp;#39;faculty_advisor&amp;#39;: faculty_advisor,
        &amp;#39;abstract_title&amp;#39;: abstract_title,
        &amp;#39;abstract&amp;#39;: abstract,
        &amp;#39;num&amp;#39;: word_key,
        &amp;#39;key&amp;#39;: word_value,
        &amp;#39;submit&amp;#39;: &amp;#39;Submit&amp;#39;
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The closing brace can either be aligned with the keys of the dictionary or be aligned with the declaration of &lt;code&gt;data&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;The next set complains about unnecessary whitespace in the lists &lt;code&gt;degree_levels&lt;/code&gt; and &lt;code&gt;advisors_nums&lt;/code&gt;. The extra whitespace does not help readability and can be done away with. While we're at it let's get rid of that comment on the end of the &lt;code&gt;advisors_nums&lt;/code&gt; line as it is not helpful either. There is also some missing whitespace after the commas in the following two lines. One space after a comma helps distinguish between the end of one parameter and the beginning of the next.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;degree_level = degree_levels[randrange(0,len(degree_levels))]
faculty_advisor = advisors_nums[randrange(0,len(advisors_nums))]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now all we are left with are two long lines and some trailing whitespace. PEP 8 specifies that lines should be no longer than 79 characters. If a line is longer than that it becomes difficult to determine what the purpose of the entire line is. Python encourages readability and only performing one task per line of code. If a line is too long than it is more than likely violating that rule. In the case of our first long line it does not look long here because I redacted the full URL. There really isn't much I can do about that. However the other line is disgusting. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;abstract = first_name+&amp;#39; &amp;#39;+last_name+&amp;#39; &amp;#39;+email+&amp;#39; &amp;#39;+degree_level+&amp;#39; &amp;#39;+department+&amp;#39; &amp;#39;+faculty_advisor+&amp;#39; &amp;#39;+abstract_title
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To improve the readability of this line we can extend it to run across multiple lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;abstract = first_name + &amp;#39; &amp;#39; + last_name + &amp;#39; &amp;#39; + email + \
    &amp;#39; &amp;#39; + degree_level + &amp;#39; &amp;#39; + department + &amp;#39; &amp;#39; + \
    faculty_advisor + &amp;#39; &amp;#39; + abstract_title
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That takes care of all of the errors reported by PEP 8 and we finish with the following. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;\&amp;quot;(.+?)\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;word_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;To prove you are a human type&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://somethingsomethingyoucantsee.me&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Jargon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Given-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Family-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num_to_spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
    &lt;span class="n"&gt;degree_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Undergraduate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Masters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Doctorate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;advisors_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;169&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;171&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_127&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_129&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_132&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c"&gt;# sp4m that submission system!&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_spam&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@gmail.com&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;degree_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# this is the code for computer science&lt;/span&gt;
        &lt;span class="n"&gt;faculty_advisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;abstract_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
            &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;degree_level&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
            &lt;span class="n"&gt;faculty_advisor&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;abstract_title&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;degree_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;degree_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;department&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;faculty_advisor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;faculty_advisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;abstract_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;abstract&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Finished spamming the submission system&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code now conforms to the majority of the PEP 8 standard. However Pylint helps fix the rest of it. Instead of walking you through the process of fixing those errors I will let you do so on your own. &lt;code&gt;pylint&lt;/code&gt; is run on your source file from the command line and it gives your code a rating. Even after fixing the prior violations via &lt;code&gt;pep8&lt;/code&gt; this code is still only a 5.96 our of 10. To make running &lt;code&gt;pylint&lt;/code&gt; on my code easier I use the &lt;code&gt;Syntastic&lt;/code&gt; plugin for Vim. I never have to leave Vim and all the syntax imperfections are pointed out to me when I save my file. The perfected code is shown below. It is actually a 9.8/10 because the &lt;code&gt;main()&lt;/code&gt; method has too many local variables. However with this script that is hard to avoid. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;This script is a proof-of-concept attack against the abstract submission&lt;/span&gt;
&lt;span class="sd"&gt;system for the _______ conference.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns the secret page word&lt;/span&gt;

&lt;span class="sd"&gt;    text - the HTML containing the secret word&lt;/span&gt;

&lt;span class="sd"&gt;    This function extracts the secret word from the page&lt;/span&gt;
&lt;span class="sd"&gt;    to get around the awful CAPTCHA functionality built&lt;/span&gt;
&lt;span class="sd"&gt;    into it. Returns the secret word&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;\&amp;quot;(.+?)\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns the content of the target page&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns the HTML containing the secret word&lt;/span&gt;

&lt;span class="sd"&gt;    content - The entire page HTML&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;word_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Parses the HTML for the target area containing the key word&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;To prove you are a human type&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    The main function&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://cpms.byu.edu/about/&amp;#39;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;#39;spring-research-conference/abstract-submission/&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num_to_spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
    &lt;span class="n"&gt;degree_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Undergraduate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Masters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Doctorate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;advisors_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;169&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;171&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_127&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_129&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_132&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c"&gt;# sp4m that submission system!&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Jargon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
            &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Given-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;first_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
            &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Family-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;last_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_to_spam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@gmail.com&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;degree_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
            &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# this is the code for computer science&lt;/span&gt;
            &lt;span class="n"&gt;faculty_advisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
            &lt;span class="n"&gt;abstract_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;degree_level&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                &lt;span class="n"&gt;faculty_advisor&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;abstract_title&lt;/span&gt;
            &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;degree_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;degree_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;department&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;faculty_advisor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;faculty_advisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;abstract_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;abstract&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Finished spamming the submission system&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Readable code is just as important as working code, especially when collaborating with others. If the author can't even understand what the code does after not looking at it for a while then how will anyone else understand it? How can that code be improved if the programmer does not even understand what it does in the first place? Improve your Python code (or any code) by using these tools and always striving to make your code more readable. Force youself if you have to by setting up pre-commit git hooks in all of your repos. You will be glad you did. &lt;/p&gt;
&lt;p&gt;Other good reading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0257/"&gt;PEP 257&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sat, 26 Jul 2014 22:38:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-07-26:improving-readability-with-pep-8.html</guid><category>python</category></item><item><title>Spamming a Submission System</title><link>https://seanmckaybeck.com/spamming-a-submission-system.html</link><description>&lt;p&gt;A while back I noticed a gaping security hole in an Abstract submission system for a student conference being held at my school. Since it was local to my school and only its students this really was not a huge risk. However, all it takes is one malicious student, or someone just happening across the system, to ruin scheduling of the entire conference layout. &lt;/p&gt;
&lt;p&gt;The system has the user enter her name, email address, department she is from, her professor/advisor, and her talk's abstract. In order to validate that it is indeed a real request the system also has the word submit a keyword displayed at the bottom of the page. The keyword works like a CAPTCHA (or CRAPTCHA as I like to call them) except it is not as "strong."&lt;/p&gt;
&lt;p&gt;I decided to play with the system and see if the keyword varied. After around ten page refreshes I noticed that it only used about seven different keywords, such as "cougar", "conference", and "spring." I then tried doing a fake submission and inspected the POST data. Everything looked exactly the same as what is displayed on the page, except that a unique number is assigned to each keyword and submitted in the POST. &lt;/p&gt;
&lt;p&gt;The keyword and its number were easily extracted from the page source. After extracting that data all that is required to submit is an abstract and author information. The fake information is easily generated from wordlists containing common first names and last names. &lt;/p&gt;
&lt;p&gt;The page can be fetched for each spam submission, or the page can be fetched once (to make it work a tad faster) and the keyword can be used for each submission. Unfortunately I was not allowed to test the attack code I wrote for fear of being kicked out of school right before finishing my degree. However it is a proof-of-concept and at least demonstrates how the attack would look. &lt;/p&gt;
&lt;p&gt;Below is the attack written in Python. I have removed the target URL as well as the actual post parameters for the keyword and its identifier for the sanity of the people who maintain the system. The system is offline now anyways, but I imagine it will not be fixed by the time it is deployed again next year. The code uses &lt;code&gt;BeautifulSoup&lt;/code&gt; and &lt;code&gt;re&lt;/code&gt; for determining the keyword information and the beautiful &lt;code&gt;requests&lt;/code&gt; module for handling the HTTP requests. It is not beautiful but it demonstrates the concept. It is currently set to submit 1,000,000 fake abstracts. This would be so many fake abstracts that all of the real ones would be buried. The poor developers would have quite a slopfest to deal with. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;\&amp;quot;(.+?)\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;word_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;To prove you are a human type&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_the_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://nomnomredacted.nom&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;word_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grab_the_word_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;word_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_the_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Jargon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Given-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Family-Names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num_to_spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;
    &lt;span class="n"&gt;degree_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Undergraduate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Masters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Doctorate&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;advisors_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;169&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;171&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_127&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_129&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g_132&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# all valid cs teachers&lt;/span&gt;

    &lt;span class="c"&gt;# sp4m that submission system!&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_to_spam&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@gmail.com&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;degree_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degree_levels&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# this is the code for computer science&lt;/span&gt;
        &lt;span class="n"&gt;faculty_advisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;advisors_nums&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;abstract_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;degree_level&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;faculty_advisor&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abstract_title&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;degree_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;degree_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;department&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;faculty_advisor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;faculty_advisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;abstract_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;abstract&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word_value&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Finished spamming the submission system&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even a normal CAPTCHA would be better than the level of security in place on the system. However since students at the school are the only ones allowed to present at the conference, users should be required to login with their school credentials in order to submit. This way only a legitimate student could carry out the attack, but the attack would be tied to his name. &lt;/p&gt;
&lt;p&gt;While the risk of attack is low from students participating in the conference, there is still a risk. Security should still be a priority, especially with systems like these. If this attack were carried out the conference would more than likely be ruined. It would take a large amount of work for the developers to remove all of the spam abstracts without removing any legitimate ones. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Fri, 06 Jun 2014 23:04:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-06-06:spamming-a-submission-system.html</guid><category>python</category><category>security</category></item><item><title>Purse.io</title><link>https://seanmckaybeck.com/purseio.html</link><description>&lt;p&gt;&lt;img alt="" src="http://bittrust.s3.amazonaws.com/1393647508.png" /&gt;&lt;/p&gt;
&lt;p&gt;One thing preventing Bitcoin from going completely mainstream is ease of purchasing. Most people are too impatient to wait for wire transfers, which currently is the main method of paying for Bitcoin. Others are too lazy to find a seller on a site like &lt;a href="https://localbitcoins.com"&gt;Local Bitcoins&lt;/a&gt;. If the person is not too lazy for that, then he most likely will be too lazy to go to a bank of the seller's choosing and deposit cash. &lt;/p&gt;
&lt;p&gt;People use credit cards for everything. Very few people carry cash on themselves anymore, and if they do it is a relatively small amount. But credit card transactions are easily reversible. This is dangerous for Bitcoin sellers as Bitcoin transactions are not reversible. A buyer could purchase with a credit card, receive his bitcoins, then reverse the transaction leaving the seller empty-handed. &lt;/p&gt;
&lt;h2&gt;A Solution?&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href="https://purse.io"&gt;Purse.io&lt;/a&gt;. Purse.io has been around since the end of 2013. It allows for buying Bitcoin with your credit card and buying items on Amazon with Bitcoin for a fraction of the original price! Yes you heard me right: you can buy from Amazon at discounted prices. Their introduction video explains it quite well. &lt;/p&gt;
&lt;iframe width="640" height="360" src="//www.youtube.com/embed/-3YOmXUaB88" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;It serves a specific purchase that many Bitcoiners have wanted for a long time: buying with Bitcoin on Amazon. It also is easy for new users as it only requires an Amazon account - which most people have - and a credit card! The downside for buyers is you purchase Bitcoin at an increased price compared to the average exchange price. However it is easy and does not take very long to do. It requires no verification on &lt;a href="https://purse.io"&gt;Purse.io&lt;/a&gt; either. Just sign up and you are ready to go. &lt;/p&gt;
&lt;h2&gt;Buying Bitcoin&lt;/h2&gt;
&lt;p&gt;Buying was straightforward. Navigate to the Buy BTC area via the sidebar on the left. You can change the buy orders shown on the page via the options at the top. I found a US-based buy order for a small amount of money and hit purchase. A screen popped up with a button to add the sellers wishlist to my Amazon cart. It really was just one click on Amazon as stated in the introduction video. I ordered the item (&lt;a href="http://www.amazon.com/gp/product/B004OVWQDA/ref=ox_ya_os_product_refresh_T1"&gt;this one&lt;/a&gt;) and entered the order number back on Purse.io. It really was a simple process. The only part that took time was waiting for Amazon to ship the item so I could enter a tracking number for the item. &lt;/p&gt;
&lt;p&gt;Amazon estimated it would take a week to ship the item but it only took a day. As soon as delivery was finished the seller confirmed receiving the item and Purse.io released the bitcoins from escrow. &lt;/p&gt;
&lt;h2&gt;Selling Bitcoin&lt;/h2&gt;
&lt;p&gt;I unfortunately bought Bitcoin with an item that required more than two days for shipping. I was impatient so instead of waiting to use the Bitcoin from my buy order I just deposited some of my own. The My Wallet page discloses your account's bitcoin address. &lt;/p&gt;
&lt;p&gt;Purse.io did not make me wait for the full deposit transaction to go through before stating that my funds were available for use, which was convenient for me from a time perspective. After one confirmation the funds were ready to use. &lt;/p&gt;
&lt;p&gt;Setting up my sell order (spend as they call it on Purse.io) was easy. I created a new wish list on Amazon with The Art of War and Beyond Fear on it, updated it to include my shipping address, then copied the share link to the sell order set up page. It took less than two minutes. Purse.io easily processed the wish list and took me to the screen for setting the discount percentage. I wanted someone to buy quickly so I set the discount as 10% and hit submit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the discount setting page" src="/content/images/2014/Jun/Screenshot-from-2014-06-03-11-17-24.png" /&gt;&lt;/p&gt;
&lt;p&gt;Waiting for a buyer sucks because I want my books now! However because my order was so small and the discount was only 10% I had a buyer within 8 minutes. &lt;/p&gt;
&lt;p&gt;It took a little longer than expected to get the books, but that was Amazon's fault, but I got them as desired! I confirmed delivery and that was it. I was done with buying my first items from Amazon using Bitcoin. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/JKFMla6.jpg?1" /&gt;&lt;/p&gt;
&lt;h2&gt;Other Things I Noticed&lt;/h2&gt;
&lt;p&gt;As I used the service there were some additional things I liked as well as a couple bugs I found. &lt;/p&gt;
&lt;h3&gt;Bugs, etc.&lt;/h3&gt;
&lt;p&gt;After finishing a purchase Purse.io gives you the option to tweet about finishing the purchase. Clicking "Tweet" takes you to the Twitter page for sharing a tweet, but the link provided links to your account through "accounts/me" or something of that nature. It would be nice if there were some context such as "I just bought from Amazon using Bitcoin! https://purse.io". This is not really a bug, but it would make the feature better.&lt;/p&gt;
&lt;p&gt;Unfortunately I did not take a screenshot of this issue, but in a transaction page when you are buying Bitcoin there is a button to cancel the transaction. The rest of the row of the page the button appears on is just white space and should not serve any purpose. However when you click anywhere in that white space the window to confirm canceling the transaction comes up. This should only happen when the actual button is pressed.&lt;/p&gt;
&lt;p&gt;I was disappointed when I was buying the books that the other person could not submit the tracking information. Amazon hid the tracking number for privacy, but the tracking number never got to me either. As a result I had no idea when my packages were going to arrive. This issue presents itself from Amazon's end, but Purse.io has a feature for adding the tracking number to an order in case they do happen to give a tracking number. According to Purse.io they can still track the order without the tracking number for shipping, but it would be nice if the user could as well in these situations. &lt;/p&gt;
&lt;h3&gt;Nice Features&lt;/h3&gt;
&lt;p&gt;The user interface is nice. It is easy to navigate the site and the colors do not pop out and blind me (I am not a huge fan of bright colors). They allow for two-factor authentication which is awesome. They do not require you to use your real information on Purse.io. They also display your total amount of Bitcoin in mBTC which I love. It is easier to say 20 mBTC instead of 0.02 BTC in my opinion and this allows for making sense of smaller transactions. They also have a chat feature within an order so you can interact with the other party. This is helpful in situations where you cannot see tracking information but the other person can at least see if the item has shipped. Finally, their customer support is fairly responsive. I interacted a fair amount with their Twitter account with questions and they responded quickly. &lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Overall it was a positive experience buying and selling on &lt;a href="https://purse.io"&gt;Purse.io&lt;/a&gt;. The amount of time to wait before receiving bitcoins or buying bitcoins varies because of the different shipping times for items on Amazon. However it is easier for new users than setting up an account on an exchange and getting verified. It is also more convenient to use a credit card on your Amazon account than it is to use a wire transfer. Purse.io satisfies a niche desire quite well and will hopefully bring more users to the world of Bitcoin. It will also hopefully encourage Amazon to start accepting Bitcoin for payment. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Fri, 06 Jun 2014 21:31:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-06-06:purseio.html</guid><category>bitcoin</category><category>review</category></item><item><title>Review of Coinbase</title><link>https://seanmckaybeck.com/review-of-coinbase.html</link><description>&lt;p&gt;&lt;img alt="" src="https://coinbase.com/assets/logos/coinbase_logo_white.png" /&gt;&lt;/p&gt;
&lt;p&gt;After an unresponsive buy request on &lt;a href="https://localbitcoins.com"&gt;Local Bitcoins&lt;/a&gt; I decided to go looking for a faster solution to scratch my Bitcoin itch. There are a lot of different exchanges running where you can exchange fiat currency for Bitcoin, but most of them require you fund your account with fiat before you can purchase your Bitcoin. However Coinbase lets you link your bank account then purchase Bitcoin without funding the account in advance with fiat. This saves you missing an opportunity to buy in at a desired price. &lt;/p&gt;
&lt;h2&gt;Account Setup&lt;/h2&gt;
&lt;p&gt;Setting up my account took less than ten minutes. I signed up with my .edu email address and Coinbase gave me 10 USD worth of Bitcoin. &lt;/p&gt;
&lt;p&gt;Linking my bank account required the account number, the routing number, and the type of account it is. As expected Coinbase also wants to verify that it is indeed your bank account information being entered. The typical method for doing this requires depositing a small amount of money into the account, waiting 2-3 days for the money to transfer, then reporting the amount deposited back to the depositer. This method is not the fastest but it works. Coinbase lets you go this route. However they also have a much faster route. Coinbase allows you to sign into your bank account through them to verify you own the account. This method is obviously fast but also obviously risky from a trust perspective. I trusted Coinbase enough to do it and nothing bad has happened. &lt;/p&gt;
&lt;p&gt;In order to be fully verified as a Tier 1 user you must also verify your email address (a confirmation email) and your phone number. The phone number is to allow for two-factor authentication of your account. It is basically forced two-factor authentication which I actually like for a service like this. Once you have completed all of this you can begin purchasing Bitcoin. &lt;/p&gt;
&lt;p&gt;&lt;img alt="daily limits" src="/content/images/2014/Jun/2014-06-02-13_46_35-Coinbase---Your-Hosted-Bitcoin-Wallet.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="verification steps" src="/content/images/2014/Jun/2014-06-02-13_49_16-Coinbase---Your-Hosted-Bitcoin-Wallet.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Purchasing&lt;/h2&gt;
&lt;p&gt;On Coinbase you select the amount of Bitcoin you wish to purchase and it locks in your purchase at the current price per Bitcoin. They then initiate a wire transfer with your linked bank account. You do not recieve the Bitcoins until the wire transfer completes so they are protected from fraud. &lt;/p&gt;
&lt;p&gt;Because it is an ACH transfer the speed with which the payment is processed depends on your bank. The transfers typically take 2-3 days. After payment is recieved Coinbase takes one day before releasing your Bitcoins. This is because ACH transfers are reversible within a day of the transfer completing. &lt;/p&gt;
&lt;p&gt;If you link your credit card to your account along with your bank account Coinbase will let you do instant buy orders. Depending on your level of verification you can only buy a certain amount per week instantly. After linking my credit card and bank account I am allowed to buy 100 USD worth. The bank transfer still takes a few days to go through, but if you absolutely need to have some Bitcoin now this is a nice option. &lt;/p&gt;
&lt;p&gt;Depending on your level of verification you can buy different amounts each day. If your bank account and credit card are linked to your account you can buy 3000 USD worth of Bitcoin each day. Coinbase requires that your first Bitcoin purchase fully completes before you can make purchase orders whenever you want. Because I made my first purchase on a Friday night at 5:30 PM over a holiday weekend it took until the next Friday to get my purchased Bitcoins. It still only took 4 business days to get my coins though so it held to the estimation on my order completion. &lt;/p&gt;
&lt;h2&gt;Selling&lt;/h2&gt;
&lt;p&gt;Selling Bitcoin is just as easy as buying it. I only sold a small amount just to test it out, but the interface is the same. You select how many Bitcoin you want to sell at the current price and Coinbase deposits the money into your bank account. It's that simple. &lt;/p&gt;
&lt;h2&gt;All the Rest&lt;/h2&gt;
&lt;p&gt;The mobile app for Android works fantastically. It has functionality for everything in the web interface except for verification. &lt;strike&gt;There is no iOS app in the App Store but that is because Apple does not allow any Bitcoin related apps into its store.&lt;/strike&gt; Actually apparently they will allow them now according to &lt;a href="https://developer.apple.com/appstore/resources/approval/guidelines.html"&gt;section 11.17&lt;/a&gt; of the App Store guidelines. &lt;/p&gt;
&lt;p&gt;The support team is very responsive. I contacted them on a Saturday morning and they responded within 30 minutes. They have effectively answered my questions each time I have contacted them. &lt;/p&gt;
&lt;p&gt;Coinbase allows you to put donation or pay-with-bitcoin buttons on your website as well. You choose what you want it to say and suggested amounts and Coinbase generates the code for you. I set one up on my &lt;a href="https://seanmckaybeck.com/about/"&gt;about page&lt;/a&gt; and it works great. &lt;/p&gt;
&lt;p&gt;I only have one issue with Coinbase. It would be great if Coinbase allowed for specifying buy/sell amounts in USD instead of just in BTC. Sometimes I have a specific amount of USD I want to buy with. By only being allowed to specify amounts in BTC I have to do a guess-and-check on amounts until I get the amount in USD I want to spend. Hopefully Coinbase will allow for this functionality in the future. &lt;/p&gt;
&lt;p&gt;Overall I would say Coinbase is an excellent choice for the purchasing of Bitcoins. From the perspective of keeping how many coins you have a secret Coinbase should not be your first choice. If that is what you care about then go to &lt;a href="https://localbitcoins.com"&gt;Local Bitcoins&lt;/a&gt; or #bitcoin-otc on Freenode. Coinbase is a great place for a beginner to the world of Bitcoin to start. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Mon, 02 Jun 2014 22:08:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-06-02:review-of-coinbase.html</guid><category>bitcoin</category><category>review</category></item><item><title>Bitcoin is NOT Anonymous</title><link>https://seanmckaybeck.com/bitcoin-is-not-anonymous.html</link><description>&lt;p&gt;Lots of people like to think Bitcoin is anonymous. When I first heard of it others marketed it to me as an anonymous currency. The reality is that Bitcoin is not anonymous. &lt;/p&gt;
&lt;p&gt;The currency itself is based on technology that provides a public ledger of every transaction that ever happens. Every transaction to and from any particular address can be seen easily. You can go to &lt;a href="https://blockchain.info"&gt;blockchain.info&lt;/a&gt; and watch transactions happening in real time. You can also go there and enter in any Bitcoin address you want and see all of its transaction history. &lt;/p&gt;
&lt;p&gt;It is easy to trick yourself into thinking that because transactions are tied to Bitcoin addresses they are not tied to you. Unless you are &lt;em&gt;&lt;strong&gt;extremely&lt;/strong&gt;&lt;/em&gt; careful that is not true. &lt;/p&gt;
&lt;p&gt;There are multiple ways that your identity can be exposed when using Bitcoin. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In-person buying&lt;/li&gt;
&lt;li&gt;Exchanges&lt;/li&gt;
&lt;li&gt;Buying products from retailers &lt;/li&gt;
&lt;li&gt;Posting an address for donations&lt;/li&gt;
&lt;li&gt;Buying services from others directly&lt;/li&gt;
&lt;li&gt;Using an online wallet&lt;/li&gt;
&lt;li&gt;The list goes on...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you buy Bitcoin from an exchange they typically require information about who you are. Right when you buy your identity is compromised. That exchange knows who you are and exactly how much Bitcoin you have (from them).&lt;/p&gt;
&lt;p&gt;If you buy a product online in Bitcoin from someone like Overstock now Overstock knows you and your address. After all, they need to know who and where to send the product to. Oh and they also know how much Bitcoin you have since you are sending right to them from your personal address.&lt;/p&gt;
&lt;p&gt;If you are looking to hide how much Bitcoin you have from Big Brother or anyone else, good luck. There are methods which can help you transact anonymously, but most people do not use them or even know they exist. The Bitcoin protocol is not inherently anonymous. &lt;a href="http://zerocash-project.org"&gt;Others&lt;/a&gt; are working to make it that way but for now it is not. Do not let the lack of anonymity sway you from buying I'm though. Bitcoin is the currency of the future and you will be sad you missed the boat. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sun, 25 May 2014 06:32:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-05-25:bitcoin-is-not-anonymous.html</guid><category>bitcoin</category></item><item><title>Getting Started with Bitcoin</title><link>https://seanmckaybeck.com/getting-started-with-bitcoin.html</link><description>&lt;p&gt;If you are new to Bitcoin you probably have no idea what you are doing. What is a wallet? What is the blockchain? What is an address? I am going to try and dumb all of that down for you and focus on the non-technical essentials. &lt;/p&gt;
&lt;h2&gt;Wallets&lt;/h2&gt;
&lt;p&gt;A wallet is used to keep track of your bitcoins. It handles what are called your public and private keys. The private key is the key to all your coins. If it is compromised your coins are gone. If you lose it your coins will be inaccessible and not recoverable. The public address is what people use to send you bitcoins. &lt;/p&gt;
&lt;p&gt;There are lots of different wallets you can use. For those who have lots of space on their computers there is &lt;a href="https://bitcoin.org/en/download"&gt;Bitcoin-Qt&lt;/a&gt;. For Android users there is Mycelium (and others). For the rest of you there are online wallet services like &lt;a href="https://blockchain.info"&gt;blockchain.info&lt;/a&gt; or &lt;a href="https://coinbase.com"&gt;Coinbase&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I like keeping my funds with me and I am on Android so I use Mycelium. I will walk you through the simple process of setting up your wallet. &lt;/p&gt;
&lt;p&gt;First slide to the far left pane and at the top you will see a button along the top for adding a new key. Click it and you will see this:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/jj9IrKV.png" width="250px"/&gt;
If you do not have a backup to import then click on "Random". If you are importing an existing key click "Scan". &lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/ArssibV.png" width="250px"/&gt;
After you click "Random" you will see this screen showing your new address. This is what you will give to people during transactions. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/yyVgfkY.png" width="250px"/&gt;
Give your address a special name if you want. This can help distinguish addresses if you use multiple. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/lJrivGO.png" width="250px"/&gt;
After this you will be taken back to your home screen. Notice the warning. You can click it and you should be taken to a screen like the following: &lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/9orrjAP.png" width="250px"/&gt;
Click on backup. After this just follow the steps (it would not let me take screenshots). This will create a PDF backup of your wallet. In case your phone is ever wiped you can restore the key into Mycelium. You will be shown a key and it will be the &lt;strong&gt;only&lt;/strong&gt; time you see it. Write it down or something. I use a password manager so I put it in there. After that click the "Share" button and choose where to save your PDF. &lt;/p&gt;
&lt;p&gt;After creating your backup you should verify that the backup works properly. Scroll all the way back to the left again and follow the steps for verifying your backup. It will require scanning a QR code and entering that password from earlier, so do it next to your home computer. &lt;/p&gt;
&lt;p&gt;Scroll through the other windows in Mycelium. There is one for all transactions with your selected wallet and another for saved addresses. &lt;/p&gt;
&lt;h2&gt;Cloud Storage for Backups&lt;/h2&gt;
&lt;p&gt;The backup process creates a PDF that needs to be saved somewhere. I have an account with a cloud storage service called &lt;a href="mega.co.nz"&gt;Mega&lt;/a&gt;. The free accounts with them give 50 GB of storage (versus 2 GB on Dropbox) and they encrypt your files in a way such that only you can see them. They also conveniently have an Android app. Create an account with Mega then when you click "Share" during the backup process you can save the PDF right to Mega. This way you will have access to it everywhere in case of emergency. &lt;/p&gt;
&lt;h2&gt;Buying&lt;/h2&gt;
&lt;p&gt;Most people who buy Bitcoin will buy from an exchange. There are a ton of different exchanges out there for you to use with each one requiring different amounts of personal information. I personally have only used &lt;a href="https://campbx.com/"&gt;Camp BX&lt;/a&gt;. They allow for buying via USPS money orders or bank transfers. &lt;/p&gt;
&lt;p&gt;I received a pamphlet with one of my miner purchases and it promotes &lt;a href="https://expresscoin.com"&gt;Express Coin&lt;/a&gt;, &lt;a href="https://coinmkt.com"&gt;CoinMKT&lt;/a&gt;, and &lt;a href="https://localbitcoins.com"&gt;Local Bitcoins&lt;/a&gt;. Local Bitcoins allows for buying in person from sellers using cash. It is well established with a lot of sellers. I have no experience with the other two but they seem to be good. The exchange you use is really up to you. Do some Google searches and try and find what you think is the best for you. To get you started also look at Bitstamp, BtcE, and Coinbase. &lt;/p&gt;
&lt;p&gt;If you are using Mycelium you will notice a section on the main page for buying/selling bitcoins. This allows you to connect with local sellers to either buy or sell. If you do not want to give personal information to exchange services this is the way to go. Prices are typically slightly higher  but it is worth it. &lt;/p&gt;
&lt;p&gt;That is it! Buy in or sell some goods and you are on your way to becoming an expert Bitcoin junky. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Wed, 21 May 2014 03:42:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-05-21:getting-started-with-bitcoin.html</guid><category>bitcoin</category><category>how-to</category></item><item><title>Why I Mine Bitcoin</title><link>https://seanmckaybeck.com/why-i-mine-bitcoin.html</link><description>&lt;p&gt;&lt;img alt="My Mining Hardware" src="http://i.imgur.com/j4670hW.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;That is my fairly simple mining setup. Two BFL Jalapenos, four Block Erupters, and five AntMiner U2s. I regret buying the Block Erupters because my AntMiners (2 GH/s) cost less per unit than the Block Erupters (336 MH/s). I really should have waited for them to drop back down in price. They are all attached to a Raspberry Pi. In total I am getting about 28 GH/s. At the current difficulty I am getting about 0.01 BTC every week, which really is not much at all. So why put all the effort into buying these and setting them up? &lt;/p&gt;
&lt;p&gt;Bitcoin needs miners to work. Without miners the blockchain would be a failure and no payments could ever go through! The currency would fall apart. I like to think my meager setup is helping someone somewhere make a transaction. When no more coins are released into the market and the big dog miners leave the small timers like me will keep on going! Any contribution of hashing to the network is beneficial. &lt;/p&gt;
&lt;p&gt;I am a nerd and I find this technology fascinating. As a result I like to show it off. Doing this opens up doors to talk about Bitcoin and get others interested in it. Bitcoin cannot thrive until it has more adopters and discussing it with anyone and everyone will bring more people to it! Mining has the benefit of confirming transactions and educating others about the currency. Once the currency gains widespread adoption its value will increase and everyone can experience the benefits of a decentralized currency. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Mon, 19 May 2014 17:43:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-05-19:why-i-mine-bitcoin.html</guid><category>bitcoin</category><category>opinion</category></item><item><title>Mozilla and DRM: Why the Fuss?</title><link>https://seanmckaybeck.com/mozilla-and-drm-why-the-fuss.html</link><description>&lt;p&gt;&lt;img alt="Image from http://abduzeedo.com/rebranding-classic-firefox-mascot" src="http://abduzeedo.com/files/originals/firefox-theme.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I am just as anti-DRM (Digital Rights Management) as the next person but I really do not understand why there has been so much of an outcry against Mozilla for allowing DRM to creep into its product. At first I was mad because DRM goes against everything Mozilla values, but then I read the posts from &lt;a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/"&gt;Mitchell Baker&lt;/a&gt; (Mozilla's executive chairwoman) and &lt;a href="https://hacks.mozilla.org/2014/05/reconciling-mozillas-mission-and-w3c-eme/"&gt;Andreas Gal&lt;/a&gt; (Mozilla's CTO). &lt;/p&gt;
&lt;p&gt;The DRM is the Encrypted Media Exchange (EME). Video playing sites like Netflix and Hulu use this to send video data to users' browsers. The browsers require what is called a Content Decryption Module (CDM) to decrypt the video data and play it back to the user. Mozilla is adding a CDM made by Adobe into the Firefox browser to keep up with the other main browsers like Chrome. The CDM is of course proprietary which is contrary to Mozilla's open source business model. &lt;/p&gt;
&lt;p&gt;The truth is, users want to watch video. Users want to watch Netflix and Hulu because there really are not a lot of better options. If Firefox did not allow viewing this content users would switch to other browsers. If Firefox had no users then Mozilla would lose its main product and it would die off. &lt;/p&gt;
&lt;p&gt;The way Mozilla is building the CDM into Firefox is the best option possible (excluding the removal of the need for CDMs from all browsers). It is completely optional for users to install, like Flash. If a user does not want the DRM in its browser then the user does not have to install it. If the user does install it, the CDM is downloaded then sandboxed in a way that can prevent the tracking of the user across multiple sites. It does not have access to data about the user's computer or the user itself besides the unique identifier generated for the user on a per-site basis. &lt;/p&gt;
&lt;p&gt;I really cannot think of a better option that still will keep users from leaving Firefox. No user wants DRM, but at the moment DRM is the only option. All we can do is continue the fight to rid the world of DRM. Until then this is the best option for Firefox. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sun, 18 May 2014 15:38:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-05-18:mozilla-and-drm-why-the-fuss.html</guid><category>opinion</category></item><item><title>Wardriving and lxml</title><link>https://seanmckaybeck.com/wardriving-and-lxml.html</link><description>&lt;h2&gt;What is wardriving?&lt;/h2&gt;
&lt;p&gt;Wardriving is not as scary as it sounds. It involves using a wireless card to collect data on wireless networks as you drive. Using a few special tools we can collect data on all sorts of wireless networks, in this case 4579 of them. This data includes the network's names (SSID and BSSID), the type of encryption it uses if any, the channel it operates on, and all sorts of other information. This kind of data is actually quite useful. It gives insight into the kinds of wireless routers people buy and also if they are using the right kind of encryption. We can even hook up a GPS transmitter and track the exact location of each network to map them out on a service called &lt;a href="https://wigle.net/"&gt;WiGLE&lt;/a&gt;. It really is quite fun. It also draws a lot of odd looks. &lt;/p&gt;
&lt;h2&gt;The setup&lt;/h2&gt;
&lt;p&gt;My friend JJ and I decided to go wardriving. It required a few tools. The first thing we needed was the right software. We used a live USB stick with Kali linux. This gave us access to a tool called Kismet which handled all the dirty work in collecting information about the wireless networks. Normally this would be enough. However the wireless card in my laptop does not have as good of a range as something like &lt;a href="http://image.dhgate.com/albu_355651168_00-1.0x0/usb-wireless-adapter-ac-wifi-adapte-alfa.jpg"&gt;this&lt;/a&gt;. Luckily my lab has a long antenna like that one, and I have a wireless card it is compatible with, so we used that and got better results than we would have otherwise. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Mar/2014_03_22_11_31_45.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see it is quite large. We also wanted to use GPS but could not get a bluetooth connection between Kali and my phone to do so. &lt;/p&gt;
&lt;h2&gt;The experiment&lt;/h2&gt;
&lt;p&gt;After plugging everything in and booting up Kali we hopped in JJ's truck and drove around the greater Brigham Young University area. We tried to focus on areas where there are apartment complexes, but we drove through some residential areas as well. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Mar/wardrive.png" /&gt;&lt;/p&gt;
&lt;p&gt;That is what Kismet looks like when running. As we drove it spit out names of wireless networks it discovered and gave a running count of the total number of networks discovered. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Mar/textsecure505519296.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;We looked quite sketchy as we drove around. I held the wireless card with the antenna straight in the air while we drove for an hour through various neighborhoods. We got lots of goofy and perplexed looks. Those people probably thought we were trying to communicate with aliens. &lt;/p&gt;
&lt;h2&gt;The data&lt;/h2&gt;
&lt;p&gt;The wardrive produced a 20 megabyte XML file for us to enjoy. The XML files Kismet produces are not the easiest to go through, but where there is a will there is a way.&lt;/p&gt;
&lt;h3&gt;Analyzing the metadata&lt;/h3&gt;
&lt;p&gt;Python is great for going through this kind of data. I had not used &lt;code&gt;lxml&lt;/code&gt; before so I decided to try it out. &lt;/p&gt;
&lt;p&gt;The obvious data to look at is how many networks were discovered and of those networks how many used certain kinds of encryption. After browsing through the XML I noticed that some of the &lt;code&gt;wireless-network&lt;/code&gt; elements did not have an &lt;code&gt;SSID&lt;/code&gt; child, and if they did that child sometimes had more than one &lt;code&gt;encryption&lt;/code&gt; child. The multiple &lt;code&gt;encryption&lt;/code&gt; elements occured when the network used WPA. I was not concerned with the specific ciphers used in the WPA handshake so I only needed one of those children. But how could I parse it correctly and get all of the text nodes I wanted? Thankfully someone came up with &lt;code&gt;xpath&lt;/code&gt; which comes in handy for parsing XML. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wardrive.netxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//wireless-network/SSID/encryption[1]/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;4579&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wpa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;None&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;none&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;WPA&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;wpa&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;WEP&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;wep&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wpa&lt;/span&gt;
&lt;span class="mi"&gt;3699&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wep&lt;/span&gt;
&lt;span class="mi"&gt;76&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;
&lt;span class="mi"&gt;804&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can load our XML document with &lt;code&gt;lxml&lt;/code&gt;'s &lt;code&gt;etree&lt;/code&gt;. We can then parse the different nodes using &lt;code&gt;xpath()&lt;/code&gt; on the &lt;code&gt;doc&lt;/code&gt; variable. The &lt;code&gt;xpath&lt;/code&gt; is constructed based on the layout of the elements in the document. The one I used only wants the first child element named &lt;code&gt;encryption&lt;/code&gt; and it gathers all of the actual text from those nodes. The result is stored in a variable that can be treated like a list even though it is not a list. From this we can gather the total number of networks (4579) and we can count the different number of networks using &lt;code&gt;WEP&lt;/code&gt;, &lt;code&gt;WPA&lt;/code&gt;, or no encryption. Thankfully the number of &lt;code&gt;WPA&lt;/code&gt; networks is by far the highest. However the number of open networks is slightly disturbing. Because we drove through mostly residential areas the number of open networks should be much lower. Normally I would attribute this to passing by a large number of businesses with open networks for customers, but that was not the case here. &lt;code&gt;WEP&lt;/code&gt; is basically dead, although it has unfortunately not been fully stamped out. &lt;/p&gt;
&lt;p&gt;If you use the development version of Kismet you can also track the number of networks using &lt;code&gt;WPS&lt;/code&gt;. If you are not aware, &lt;code&gt;WPS&lt;/code&gt; is horribly flawed yet its use is widespread. &lt;/p&gt;
&lt;p&gt;There are plenty of other statistics you could get from these XML log files. I personally am only interested in encryption statistics. So go out wardriving, maybe use a &lt;a href="https://seanmckaybeck.com/making-wardriving-easier/"&gt;Raspberry Pi&lt;/a&gt;, and start parsing those log files with &lt;code&gt;xpath&lt;/code&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sat, 05 Apr 2014 02:47:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-04-05:wardriving-and-lxml.html</guid><category>python</category><category>security</category></item><item><title>Unnecessary Censorship</title><link>https://seanmckaybeck.com/unnecessary-censorship.html</link><description>&lt;p&gt;The &lt;a href="http://ifea.net/cipa.pdf"&gt;Children's Internet Protection Act&lt;/a&gt; passed into law in the year 2000. Its purpose is to protect minors from sexually explicit content online while at a library. While this is a good cause the methods required to enforce the law are ineffective and lead to many negative side effects. &lt;/p&gt;
&lt;h2&gt;Filters&lt;/h2&gt;
&lt;p&gt;Filters are ineffective at protecting minors from harmful content. An example of this is Google's Safe Search. I always have Safe Search enabled, especially when searching for images. I have done searches for the most innocent of things and still had a naked woman pop up. Even Google can't get filtering perfectly right! &lt;/p&gt;
&lt;p&gt;Filters often block false positives. The simplest of filters use keyword matching which will more times than not lead to perfectly acceptable articles or websites being blocked. The recently implemented porn filters in the UK &lt;a href="http://torrentfreak.com/uk-porn-filter-blocks-legitimate-file-sharing-services-and-torrentfreak-140103/"&gt;blocked content&lt;/a&gt; from legitimate websites, including the download page for the Fedora operating system! As far as I can tell there is nothing explicit about an operating system. &lt;/p&gt;
&lt;h2&gt;Harmful to Minors&lt;/h2&gt;
&lt;p&gt;The definition of "harmful to minors" in the law is overly broad. Parts A and B of the definition are specific to porn, which I have no contention with. There really is no reason to watch porn at a public library. But part C is what worries me. It states that images which "taken as a whole, [lack] serious literary, artistic, political, or scientific value as to minors" should be blocked as well. What qualifies as an image lacking in "literary, artistic, political, or scientific value"? Who makes the decision that the content is lacking? This broad definition of harmful content can easily be used to filter legitimate, constitutionally protected content. &lt;/p&gt;
&lt;h2&gt;Circumventing Filtering&lt;/h2&gt;
&lt;p&gt;It does not take a genius to circumvent filtering. When I was 15 I used a proxy to access flash games on school computers without any hassle. No matter how good of a filter you use a minor can find a simple solution to getting around it. This ease of circumvention makes the filter useless. The filter becomes a &lt;strong&gt;&lt;em&gt;waste&lt;/em&gt;&lt;/strong&gt; of resources that would be better spent on new books or additions to the library. Setting up and maintaining a filter is a huge cost to the library and a poor allocation of time. Those who intend to access this harmful content will find a way around the filter while those who have no intent to access harmful content will be barred from the legitimate content they seek. &lt;/p&gt;
&lt;h2&gt;Public Access&lt;/h2&gt;
&lt;p&gt;Public libraries serve as access portals to information. Millions of people here in the USA do not have an internet connection at home, and thus they rely on publicly available connections to access content online. Blocking acceptable content or web services restricts these people's access to resources that may be beneficial to them. Content blocking is in direct opposition to the kind of free access to information libraries should provide. &lt;/p&gt;
&lt;p&gt;This law does more harm than good. In the interest of free access to information it should be fixed or undone. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Fri, 04 Apr 2014 19:53:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-04-04:unnecessary-censorship.html</guid><category>404-day</category></item><item><title>Making Wardriving Mobile</title><link>https://seanmckaybeck.com/making-wardriving-mobile.html</link><description>&lt;p&gt;Holding a laptop in your lap seems fun and all while you wardrive, but in reality it isn't very convenient. The ideal wardriving setup is small and mobile so you can shove it in a backpack and have it with you not just when you are driving, but also when you are biking or walking. &lt;/p&gt;
&lt;p&gt;The obvious choice for something like this is a Raspberry Pi. I use my phone typically, but it is only good for biking and walking. However the Pi does not make seeing a screen easy unless I want to carry around a monitor. I do want to see statistics on the networks I discover while I am wardriving after all. The higher the number of networks the more exciting it becomes!&lt;/p&gt;
&lt;p&gt;Adafruit to the rescue! Adafruit sells an &lt;a href="https://www.adafruit.com/products/1109"&gt;LCD plate&lt;/a&gt; that works with the Raspberry Pi. They also have conveniently open sourced their &lt;a href="https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code"&gt;Python code&lt;/a&gt; for it so it is easy to work with the LCD. After a decent amount of soldering I had a working LCD.&lt;/p&gt;
&lt;p&gt;For actual war driving software I use Kismet and gpsd. Kismet does the heavy lifting of discovering networks via the wireless card (I use the Alfa AWUS036H) and thankfully it has protocols clients can use to gather information about discovered networks.&lt;/p&gt;
&lt;p&gt;I spent about an hour and a half writing the code that interfaces with the LCD and communicates with Kismet (but I spend a lot more than that actually finding out how to communicate with Kismet). I also have made it &lt;a href="https://github.com/ThaWeatherman/KismetPiDisplay"&gt;open source&lt;/a&gt; with a description of how to get everything set up and working. It uses other open source software made by &lt;a href="https://github.com/PaulMcMillan/kismetclient"&gt;Paul McMillan&lt;/a&gt; to communicate with Kismet. Feel free to browse the code and see how it works. It is licensed under the GNU Public License version 3 so you are free to change it. Improvements are of course welcome. &lt;/p&gt;
&lt;h2&gt;See it in Action&lt;/h2&gt;
&lt;p&gt;Starting up the code is simple.&lt;/p&gt;
&lt;iframe width="640" height="360" src="//www.youtube.com/embed/C2a5YFlhnfo?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Sorry about the poor quality, but here is the LCD code in action.&lt;/p&gt;
&lt;iframe width="640" height="360" src="//www.youtube.com/embed/Cq7il6wo5so?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Thu, 03 Apr 2014 04:45:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-04-03:making-wardriving-mobile.html</guid><category>security</category><category>electronics</category></item><item><title>On the Security of Windows</title><link>https://seanmckaybeck.com/on-the-security-of-windows.html</link><description>&lt;p&gt;No, not Microsoft Windows. I'm talking about the actual windows on your house or apartment. If you have sliding windows with a screen on the outside, this is applicable to you. &lt;/p&gt;
&lt;h2&gt;Backstory&lt;/h2&gt;
&lt;p&gt;My freshman year at BYU a friend taught me how to break into my dorm room through the window if I ever got locked out. In fact, even if the window was &lt;strong&gt;locked&lt;/strong&gt; I could still get in. It proved to be a useful trick as I managed to forget my room key often. It also was useful in a few pranks my friends and I pulled that required entrance to someone else's room. &lt;/p&gt;
&lt;p&gt;After I got back from Samoa I had not kicked the habit of forgetting my house key. Thankfully my new apartment had the same kind of windows my freshman dorm room sported, so my bad habit did not inhibit me. &lt;/p&gt;
&lt;p&gt;The other day I decided to walk home from campus. As I was walking my wife reminded me I didn't have a key, and she was nowhere near home, so I was locked out. I went home anyways and planned on sitting outside until she came home. When I got home I realized my windows were the same as those I am used to exploiting, and I remembered I had left the window unlocked. My apartment is on the second floor so it was tricky, but after dangling from the window ledge for a minute I was able to get inside. I have since fixed the problem. &lt;/p&gt;
&lt;h2&gt;The Exploit&lt;/h2&gt;
&lt;p&gt;The main reason this is so easy to do is the window screen. The screen is designed to be removed from the outside. It also has notches on the corners that make it easy to grip (although this is not necessary as it is still fairly easy to grip without the notches). With some wiggling the screen pops out easily and you now only have a sliding window in your way. &lt;/p&gt;
&lt;p&gt;If the window is unlocked you simply slide it open. Then you just have to dodge the blinds and you are in. If the window is locked and allows for it, you can still get in. By pushing in and up on the window you essentially unlock the window and can then slide it open, although it is crooked when you do it. This exploits the extra space along the top of the window. &lt;/p&gt;
&lt;h3&gt;A Walk-through&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Notches" src="/content/images/2014/Mar/2014_03_14_17_20_41-2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Gripping these notches makes popping the screen out a simple task. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pop it" src="/content/images/2014/Mar/2014_03_14_17_12_06.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I push the screen to the right and pull out and it pops out with ease. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Slide it open" src="/content/images/2014/Mar/2014_03_14_17_21_22.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The window is unlocked so I can slide it open without any issue. However if it were locked I would push in and up and could then slide the window open. After dangling on the ledge I can get in!&lt;/p&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;There are simple fixes for this issue. The easiest is to put a wooden rod along the area where the window slides. An attacker can't get in without breaking the whole window and making a lot of noise, which is not ideal for the attacker. However this is a bandaid over the real problem. &lt;/p&gt;
&lt;p&gt;The first step in fixing this is to remove the wiggle room along the top of the window. This prevents an attacker from opening the window when it is locked. &lt;/p&gt;
&lt;p&gt;Another fix is what my apartment complex does. They put two little bars along the top of the empty space above the window. When you push up the window is stuck against the bars and you can't circumvent the lock. &lt;/p&gt;
&lt;p&gt;&lt;img alt="The bars" src="/content/images/2014/Mar/2014_03_14_17_21_59.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The second step is making the screen only accessible from the inside. If the screen can only be removed from the inside the attacker would have to cut through the screen and then mount an attack on the sliding window. This slows down entry time which is not desirable for an attacker. &lt;/p&gt;
&lt;p&gt;If you have windows like this currently you should see if it is possible to apply these fixes. If not just use the bandaid solution, and the next time you put in a sliding window make sure it is done right. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sat, 15 Mar 2014 03:09:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-03-15:on-the-security-of-windows.html</guid><category>security</category></item><item><title>About</title><link>https://seanmckaybeck.com/about.html</link><description>&lt;p&gt;&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;&lt;img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" /&gt;&lt;/a&gt;&lt;br /&gt;All work by &lt;span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName"&gt;Sean McKay Beck&lt;/span&gt; on this website is licensed under a &lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt; unless otherwise specified.&lt;/p&gt;
&lt;p&gt;See me on &lt;a href="https://keybase.io/thaweatherman"&gt;Keybase&lt;/a&gt; to verify who I am and find my PGP info. &lt;/p&gt;
&lt;p&gt;As the URL tells you, my name is Sean. I am currently working towards a Masters in Security Informatics at Johns Hopkins University. I have a particularly strong interest in cryptography, although anything security-oriented gets me fired up. You can see what I'm currently working on in my free time or a more-information-than-needed resume at &lt;a href="https://github.com/ThaWeatherman"&gt;Github&lt;/a&gt; and &lt;a href="http://www.linkedin.com/in/seanmckaybeck/"&gt;Linkedin&lt;/a&gt;. If you want me to help out on a project feel free to email me.&lt;/p&gt;
&lt;p&gt;I am a big believer in the need for patent and copyright reform. I also believe defending an open and free internet is key to promoting innovation. The Electronic Frontier Foundation (EFF) is the leader in these causes. Click below to learn more about the EFF and why their organization is awesome. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.eff.org/join"&gt;&lt;img src="https://www.eff.org/files/eff-banner.jpg" alt="Join EFF!" border="0"&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;I enjoy wardriving, and in order to contribute to the community effort I submit my data to &lt;a href="https://wigle.net"&gt;WiGLE&lt;/a&gt;. Here is my badge!
&lt;a href="http://wigle.net"&gt;&lt;img border="0" src="http://wigle.net/bi/dBTk9udPHGN1nf_O4kPdMw.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.enigmagroup.org"&gt;Enigma Group&lt;/a&gt; is an EXCELLENT resource for learning the basics of hacking all the way to more advanced skills. Check out my ranking and ask me questions about challenges you're stuck on that I've solved &lt;a href="http://www.enigmagroup.org/user/36930"&gt;here&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Wed, 12 Mar 2014 20:04:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-03-12:about.html</guid></item><item><title>Choosing a Good Password</title><link>https://seanmckaybeck.com/choosing-a-good-password.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;Your password should be at least eight characters
It should contain at least one number
It should contain at least one uppercase letter
It should contain one of the following symbols: !, $, @, %
The upper case letter should not appear at the start
The number should not appear at the end
You should enter the password with your eyes closed while using your nose
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Have you ever seen rules like these? Of course you have. Do you hate rules like these? Do you hate passwords in general? If you do, I agree with you: they suck. However passwords aren't leaving us anytime soon. Passwords are here to stay. &lt;/p&gt;
&lt;h2&gt;But why?&lt;/h2&gt;
&lt;p&gt;Because there are &lt;strong&gt;no&lt;/strong&gt; better options. Think about it: what else could you use to prove you are you to a website? Nothing. One could argue for some obscure form of &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;public key cryptography&lt;/a&gt; but that isn't user-friendly. There has been plenty of &lt;a href="https://research.microsoft.com/apps/pubs/?id=161585"&gt;research&lt;/a&gt; in this field and the general consensus is passwords are here to stay.&lt;/p&gt;
&lt;h2&gt;But those rules...is there no other way?&lt;/h2&gt;
&lt;p&gt;Unfortunately some people think forcing users to obey sets of password rules like those shown above makes the users' accounts more safe from being breached. What it really does is make it easier for an attacker to guess your password. Instead of having no idea of how long the password is or what kinds of characters are used in it the attacker knows exactly what to go after. If the website is ever breached and the user account database is dumped, the hacker will be overjoyed with how easy it is to crack your password. &lt;/p&gt;
&lt;p&gt;Restrictive rules like these are more harmful than helpful. The best thing to do if you see them is contact the support team and tell them you don't like the rules. If enough people complain maybe we can cure this disease. &lt;/p&gt;
&lt;p&gt;Despite all of this there are still best practices for choosing a password. &lt;/p&gt;
&lt;h2&gt;Best practices&lt;/h2&gt;
&lt;h3&gt;Passphrase?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/936/"&gt;Some people say&lt;/a&gt; you should use some sort of pneumonic to remember your password. Instead of using a pass&lt;em&gt;word&lt;/em&gt; you should use a pass&lt;em&gt;phrase&lt;/em&gt;. An example would be the names of all the cats my family has owned over the years. I disagree!&lt;/p&gt;
&lt;p&gt;If I were to choose a passphrase it would be chosen from a pool of things I can easily remember, such as names, places, or favorite things. Most likely these things would be similar in some way or another to increase memorability. Say I comprised my passphrase of the names of my grandparents: clivedixiepauljudy. This is easy for me to remember and long enough that it would take some time to crack. However with a little background knowledge about my life a determined attacker could try phrases like this until s/he found my phrase! It is &lt;strong&gt;not&lt;/strong&gt; hard to find out personal information about a person. Facebook connections give away a lot, and most Twitter profiles are public. This makes passphrases weak in practice, unless you choose them to be completely random, such as &lt;code&gt;nailfishhousetarbush&lt;/code&gt;, thus making them less memorable and defeating the purpose of the phrase entirely. &lt;/p&gt;
&lt;h3&gt;Reuse&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/792/"&gt;Don't ever reuse a password&lt;/a&gt;. &lt;strong&gt;&lt;em&gt;Never ever ever ever&lt;/em&gt;&lt;/strong&gt;. Why? All it takes is me getting your password from one website to get into your account on multiple websites. If &lt;code&gt;cutekitteh&lt;/code&gt; is my password on Facebook and Chase bank and you get my Facebook password, you now have access to my bank account. Relying on the website to keep your password safeguarded is a poor approach as well, as &lt;a href="http://thinkprogress.org/security/2013/12/31/3108661/10-biggest-privacy-security-breaches-rocked-2013/#"&gt;many&lt;/a&gt; services have shown us. Developers aren't geniuses and often make poor choices when it comes to safely storing sensitive information. &lt;/p&gt;
&lt;h3&gt;What then?&lt;/h3&gt;
&lt;p&gt;A long, completely random password is more effective. &lt;code&gt;laul@hf8#7ho78q4roa$3hah3^o8r38hr3p*ha3rh&lt;/code&gt; is a good example. What? How will you remember that? You don't. Instead, let something remember it for you. Most websites have a maximum password length, so I typically stick with 30 characters. &lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;So how &lt;em&gt;do&lt;/em&gt; you create a random 20+ character password and keep track of a different one for each website? Enter the password manager. &lt;/p&gt;
&lt;p&gt;A password manager handles storing all of these passwords for you, tracking what they are for, generating the passwords, and even filling in the details when you access the website! A lot of people use &lt;a href="https://lastpass.com/"&gt;LastPass&lt;/a&gt; but I don't so I can't say much about it. LastPass seems to be a nice service, although to use their mobile apps you have to pay. You also have to trust them to store all of your credentials safely, since your password "vault" syncs up to their servers. I personally don't trust any entity enough to give it the keys to all of my personal information, so my recommendation is to avoid LastPass.&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://keepass.info/"&gt;KeePass&lt;/a&gt;. KeePass lets you categorize your passwords based on what you use them for. It also will generate passwords for you so you don't have to worry about smashing your keyboard every time you want to create a new account somewhere. You do have to manually add the information to KeePass, but that's OK: after the entry is in your database KeePass has some shortcuts for quick copy-pasting so you can login to whatever you want easily. KeePass also stores all these credentials in an encrypted form, so you do have to remember one password. &lt;/p&gt;
&lt;p&gt;There are a classic and professional version of KeePass. However both are completely free to use. The main version is made for Windows, but there are options for other platforms as well. The &lt;a href="http://keepass.info/download.html"&gt;download page&lt;/a&gt; has a list of ports to other platforms, including OS X, iOS, Android, and Blackberry. I use &lt;a href="https://play.google.com/store/apps/details?id=keepass2android.keepass2android"&gt;KeePass2Android&lt;/a&gt; and it is great. I sync my database from my computer to my phone with Dropbox. Since the database is encrypted with a strong password (mine is 34 characters) I have no worries about Dropbox snooping around my password database. Thanks to Dropbox I can access all of my accounts on my phone, my Linux computers, and my Windows computers. &lt;/p&gt;
&lt;p&gt;You can use whatever password manager you want, but I recommend KeePass. You can use your web browser if you want, but I avoid that as malware is designed specifically to steal passwords from web browsers. If you care about the security of your information you need to start using these kinds of techniques. You will be glad you did. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Mon, 10 Mar 2014 16:42:00 -0400</pubDate><guid>tag:seanmckaybeck.com,2014-03-10:choosing-a-good-password.html</guid><category>security</category><category>passwords</category></item><item><title>Hello World</title><link>https://seanmckaybeck.com/hello-world.html</link><description>&lt;p&gt;Hello world! I finally went and bought my domain name and a VPS. I was hesitant at first but it was totes worth it. &lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h3&gt;Server space&lt;/h3&gt;
&lt;p&gt;I bought the $5/month Virtual Private Server (VPS) plan from &lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;. They market it as being ready to go in 55 seconds. It took about a minute for mine, so that's definitely accurate! DigitalOcean is awesome, so if you want a VPS for your own website, use them.&lt;/p&gt;
&lt;h3&gt;Registrar&lt;/h3&gt;
&lt;p&gt;Well every good website needs a domain name. No one wants to access one via an IP address. So I went to &lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt; and bought my domain name &lt;em&gt;seanmckaybeck.com&lt;/em&gt; for $10.69 a year. It was a very simple checkout process, and they even included a free Whois Guard!! For those who don't know what that means, &lt;code&gt;whois&lt;/code&gt; is a service/command to look up information about a domain name and normally the owner's address, phone number, and email are attached to the record. I don't know about you, but I don't want some creep looking up my address with ease. Whois Guard prevents that information from being attached to the record, and instead it puts fake information in for you. The registrar (Namecheap in my case) still has that information, but it isn't publicly available. Thank you Namecheap!&lt;/p&gt;
&lt;h3&gt;The blog&lt;/h3&gt;
&lt;p&gt;This blog is powered by &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt;. It is a minimalistic blogging platform. I like it because it focuses on content delivery rather than bells and whistles. It's easy to install new themes, which you can get for free on the &lt;a href="http://marketplace.ghost.org/"&gt;Ghost marketplace&lt;/a&gt;, so focusing on what you say is simple. You write in Markdown which makes it easy to style your posts while you write. If you want to use HTML in your posts you can do that too (embedding videos, yadda yadda yadda)! &lt;/p&gt;
&lt;p&gt;Basically, Ghost is awesome. And it's OPEN SOURCE! That may not mean much to you, but basically it means it is free for anyone to use (free as in freedom, but in Ghost's case it is also free to download the source code). So stop using Blogger. Everyone uses Blogger and their blogs look the same and bland. Switch to Ghost! You'll be glad you did. &lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;My writing skills have deteriorated since high school. I would like to fix that, and the best way to become a better writer is to write. This will help me in that endeavor. &lt;/p&gt;
&lt;p&gt;Blogs are a great way of sharing information. I'm all about open access and shariing knowledge, and this will help me to do that. Sharing information inspires innovation and maybe I will be able to contribute to that. If not, well at least I tried!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Beck</dc:creator><pubDate>Sat, 08 Mar 2014 15:54:00 -0500</pubDate><guid>tag:seanmckaybeck.com,2014-03-08:hello-world.html</guid><category>first-post</category></item></channel></rss>